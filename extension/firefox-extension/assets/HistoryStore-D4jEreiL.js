var w=Object.defineProperty;var f=(h,e,s)=>e in h?w(h,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):h[e]=s;var g=(h,e,s)=>f(h,typeof e!="symbol"?e+"":e,s);class x{constructor(){g(this,"DB_NAME","chroniclesync");g(this,"HISTORY_STORE","history");g(this,"DEVICE_STORE","devices");g(this,"DB_VERSION",3);g(this,"db",null)}async init(){return new Promise((e,s)=>{console.log("Initializing IndexedDB...");const o=indexedDB.open(this.DB_NAME,this.DB_VERSION);o.onerror=()=>{console.error("Error opening IndexedDB:",o.error),s(o.error)},o.onsuccess=()=>{console.log("IndexedDB opened successfully"),this.db=o.result,e()},o.onupgradeneeded=c=>{var t;console.log("Upgrading IndexedDB schema...");const i=c.target.result,n=c.oldVersion;if(!i.objectStoreNames.contains(this.HISTORY_STORE)){const r=i.createObjectStore(this.HISTORY_STORE,{keyPath:"visitId"});r.createIndex("visitTime","visitTime"),r.createIndex("syncStatus","syncStatus"),r.createIndex("url","url"),r.createIndex("deviceId","deviceId"),r.createIndex("lastModified","lastModified"),console.log("Created history store with indexes")}if(i.objectStoreNames.contains(this.DEVICE_STORE)||(i.createObjectStore(this.DEVICE_STORE,{keyPath:"deviceId"}).createIndex("lastSeen","lastSeen"),console.log("Created devices store")),n<3&&i.objectStoreNames.contains(this.HISTORY_STORE)){const a=(t=c.target.transaction)==null?void 0:t.objectStore(this.HISTORY_STORE);a&&!a.indexNames.contains("hasContent")&&(a.createIndex("hasContent","pageContent",{unique:!1}),console.log("Added page content index"))}}})}async addEntry(e){if(!this.db)throw new Error("Database not initialized");return new Promise((s,o)=>{const i=this.db.transaction([this.HISTORY_STORE],"readwrite").objectStore(this.HISTORY_STORE),n={...e,syncStatus:"pending",lastModified:Date.now()},t=i.put(n);t.onerror=()=>o(t.error),t.onsuccess=()=>s()})}async getUnsyncedEntries(){if(!this.db)throw new Error("Database not initialized");return new Promise((e,s)=>{const n=this.db.transaction([this.HISTORY_STORE],"readonly").objectStore(this.HISTORY_STORE).index("syncStatus").getAll("pending");n.onerror=()=>s(n.error),n.onsuccess=()=>e(n.result)})}async markAsSynced(e){if(!this.db)throw new Error("Database not initialized");return new Promise((s,o)=>{const i=this.db.transaction([this.HISTORY_STORE],"readwrite").objectStore(this.HISTORY_STORE),n=i.get(e);n.onerror=()=>o(n.error),n.onsuccess=()=>{const t=n.result;if(t){t.syncStatus="synced",t.lastModified=Date.now();const r=i.put(t);r.onerror=()=>o(r.error),r.onsuccess=()=>s()}else s()}})}async getEntries(e,s){if(!this.db)throw console.error("Database not initialized"),new Error("Database not initialized");return new Promise((o,c)=>{console.log("Getting history entries...");const n=this.db.transaction([this.HISTORY_STORE],"readonly").objectStore(this.HISTORY_STORE);let t;e?t=n.index("deviceId").getAll(e):t=n.index("lastModified").getAll(s?IDBKeyRange.lowerBound(s):void 0),t.onerror=()=>{console.error("Error getting entries:",t.error),c(t.error)},t.onsuccess=()=>{const a=(t.result||[]).filter(l=>!l.deleted);console.log("Retrieved entries:",a.length),o(a)}})}async mergeRemoteEntries(e){if(!this.db)throw new Error("Database not initialized");return new Promise((s,o)=>{const i=this.db.transaction([this.HISTORY_STORE],"readwrite").objectStore(this.HISTORY_STORE);let n=0,t=0;e.forEach(r=>{const a=i.get(r.visitId);a.onerror=()=>{t++,n+t===e.length&&(t>0?o(new Error(`Failed to merge ${t} entries`)):s())},a.onsuccess=()=>{const l=a.result;if(!l||r.lastModified>l.lastModified){const d=i.put({...r,syncStatus:"synced"});d.onerror=()=>{t++,n+t===e.length&&(t>0?o(new Error(`Failed to merge ${t} entries`)):s())},d.onsuccess=()=>{n++,n+t===e.length&&(t>0?o(new Error(`Failed to merge ${t} entries`)):s())}}else n++,n+t===e.length&&(t>0?o(new Error(`Failed to merge ${t} entries`)):s())}})})}async updateDevice(e){if(!this.db)throw new Error("Database not initialized");return new Promise((s,o)=>{const i=this.db.transaction([this.DEVICE_STORE],"readwrite").objectStore(this.DEVICE_STORE),n={...e,lastSeen:Date.now()},t=i.put(n);t.onerror=()=>o(t.error),t.onsuccess=()=>s()})}async getDevices(){if(!this.db)throw new Error("Database not initialized");return new Promise((e,s)=>{const i=this.db.transaction([this.DEVICE_STORE],"readonly").objectStore(this.DEVICE_STORE).getAll();i.onerror=()=>s(i.error),i.onsuccess=()=>e(i.result||[])})}async deleteEntry(e){if(!this.db)throw new Error("Database not initialized");return new Promise((s,o)=>{const i=this.db.transaction([this.HISTORY_STORE],"readwrite").objectStore(this.HISTORY_STORE),n=i.get(e);n.onerror=()=>o(n.error),n.onsuccess=()=>{const t=n.result;if(t){t.deleted=!0,t.lastModified=Date.now(),t.syncStatus="pending";const r=i.put(t);r.onerror=()=>o(r.error),r.onsuccess=()=>s()}else s()}})}async updatePageContent(e,s){if(!this.db)throw new Error("Database not initialized");return new Promise((o,c)=>{const n=this.db.transaction([this.HISTORY_STORE],"readwrite").objectStore(this.HISTORY_STORE),r=n.index("url").getAll(e);r.onerror=()=>c(r.error),r.onsuccess=()=>{const a=r.result;if(a&&a.length>0){const l=a.reduce((u,S)=>S.visitTime>u.visitTime?S:u,a[0]);l.pageContent={content:s.content,summary:s.summary,extractedAt:Date.now()},l.syncStatus="pending",l.lastModified=Date.now();const d=n.put(l);d.onerror=()=>c(d.error),d.onsuccess=()=>o()}else o()}})}async searchContent(e){if(!this.db)throw new Error("Database not initialized");return!e||e.trim().length===0?[]:new Promise((s,o)=>{const n=this.db.transaction([this.HISTORY_STORE],"readonly").objectStore(this.HISTORY_STORE).getAll();n.onerror=()=>o(n.error),n.onsuccess=()=>{const t=n.result||[],r=[],a=t.filter(d=>!d.deleted&&d.pageContent&&d.pageContent.content),l=e.toLowerCase();for(const d of a){const u=d.pageContent.content.toLowerCase(),S=[];let R=0;for(;R<u.length;){const E=u.indexOf(l,R);if(E===-1)break;const I=Math.max(0,E-100),T=Math.min(u.length,E+e.length+100),O=d.pageContent.content.substring(E,E+e.length),b=d.pageContent.content.substring(I,T);S.push({text:O,context:b}),R=E+e.length}S.length>0&&r.push({entry:d,matches:S})}s(r)}})}}export{x as H};
