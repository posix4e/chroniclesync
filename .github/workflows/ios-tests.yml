name: iOS Tests

on:
  push:
    branches: [main]
    paths:
      - 'extension/**'
  pull_request:
    branches: [main]
    paths:
      - 'extension/**'
  workflow_dispatch:

jobs:
  build-and-test-ios:
    name: Build and Test iOS
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Install dependencies
        run: |
          cd extension
          npm ci
          npm run build
      
      - name: Build Safari extension
        run: |
          cd extension
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:extension
      
      - name: List available simulators
        run: |
          xcrun simctl list devices available

      - name: Setup environment
        run: |
          cd extension/ios-tests/ChronicleSync
          
          # Debug: List directory structure
          echo "=== Directory Structure ===" | tee -a setup_log.txt
          find . -type f | sort | tee -a setup_log.txt
          
          # Debug: Check Assets.xcassets
          echo "=== Assets.xcassets Content ===" | tee -a setup_log.txt
          find ./ChronicleSync/Assets.xcassets -type f | sort | tee -a setup_log.txt
          
          # Debug: Check Extension Resources
          echo "=== Extension Resources ===" | tee -a setup_log.txt
          find ./ChronicleSync\ Extension/Resources -type f | sort | tee -a setup_log.txt
          
          # Find available simulator
          echo "=== Available Simulators ===" | tee -a setup_log.txt
          xcrun simctl list devices available | tee -a setup_log.txt
          
          # Try to find iPhone 16 Pro simulator
          IPHONE_16_PRO=$(xcrun simctl list devices available -j | jq -r '.devices | to_entries[] | .value[] | select(.isAvailable == true and .name == "iPhone 16 Pro") | .udid' | head -n 1)
          
          if [ -n "$IPHONE_16_PRO" ]; then
            echo "Found iPhone 16 Pro simulator: $IPHONE_16_PRO" | tee -a setup_log.txt
            echo "SIMULATOR_ID=$IPHONE_16_PRO" >> $GITHUB_ENV
            echo "SIMULATOR_NAME=iPhone 16 Pro" >> $GITHUB_ENV
          else
            # Find any iPhone simulator
            IPHONE_SIM=$(xcrun simctl list devices available -j | jq -r '.devices | to_entries[] | .value[] | select(.isAvailable == true and (.name | contains("iPhone"))) | .udid' | head -n 1)
            
            if [ -n "$IPHONE_SIM" ]; then
              IPHONE_NAME=$(xcrun simctl list devices available -j | jq -r --arg UDID "$IPHONE_SIM" '.devices | to_entries[] | .value[] | select(.udid == $UDID) | .name' | head -n 1)
              echo "Found iPhone simulator: $IPHONE_SIM ($IPHONE_NAME)" | tee -a setup_log.txt
              echo "SIMULATOR_ID=$IPHONE_SIM" >> $GITHUB_ENV
              echo "SIMULATOR_NAME=$IPHONE_NAME" >> $GITHUB_ENV
            else
              # Find any simulator
              ANY_SIM=$(xcrun simctl list devices available -j | jq -r '.devices | to_entries[] | .value[] | select(.isAvailable == true) | .udid' | head -n 1)
              
              if [ -n "$ANY_SIM" ]; then
                ANY_NAME=$(xcrun simctl list devices available -j | jq -r --arg UDID "$ANY_SIM" '.devices | to_entries[] | .value[] | select(.udid == $UDID) | .name' | head -n 1)
                echo "Found simulator: $ANY_SIM ($ANY_NAME)" | tee -a setup_log.txt
                echo "SIMULATOR_ID=$ANY_SIM" >> $GITHUB_ENV
                echo "SIMULATOR_NAME=$ANY_NAME" >> $GITHUB_ENV
              else
                echo "No available simulator found, will use generic destination" | tee -a setup_log.txt
                echo "SIMULATOR_ID=generic" >> $GITHUB_ENV
                echo "SIMULATOR_NAME=generic" >> $GITHUB_ENV
              fi
            fi
          fi
      
      - name: Upload setup logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-setup-logs
          path: extension/ios-tests/ChronicleSync/setup_log.txt
          retention-days: 30
      
      - name: Build iOS app for simulator
        run: |
          cd extension/ios-tests/ChronicleSync
          
          echo "=== Building iOS app with simulator: $SIMULATOR_NAME ($SIMULATOR_ID) ===" | tee -a build_log.txt
          
          if [ "$SIMULATOR_ID" == "generic" ]; then
            xcodebuild build -scheme "ChronicleSync" -destination "platform=iOS Simulator,id=dvtdevice-DVTiOSDeviceSimulatorPlaceholder-iphonesimulator:placeholder" -verbose 2>&1 | tee -a build_log.txt
          else
            xcodebuild build -scheme "ChronicleSync" -destination "platform=iOS Simulator,id=$SIMULATOR_ID" -verbose 2>&1 | tee -a build_log.txt
          fi
          
          # Check if build was successful
          if [ $? -eq 0 ]; then
            echo "Build successful" | tee -a build_log.txt
            echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "Build failed" | tee -a build_log.txt
            echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi
      
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-build-logs
          path: extension/ios-tests/ChronicleSync/build_log.txt
          retention-days: 30
          
      - name: Create archive and IPA
        if: env.BUILD_SUCCESS == 'true'
        run: |
          cd extension/ios-tests/ChronicleSync
          
          echo "=== Creating archive for iOS app ===" | tee -a archive_log.txt
          
          # Create a temporary export options plist
          cat > ExportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>FAKETEAMID</string>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOL
          
          # Archive the app
          xcodebuild archive -scheme "ChronicleSync" -archivePath "./ChronicleSync.xcarchive" -verbose 2>&1 | tee -a archive_log.txt
          
          # Check if archive was successful
          if [ $? -eq 0 ]; then
            echo "Archive successful" | tee -a archive_log.txt
            
            # Export the archive as an IPA
            echo "=== Exporting archive as IPA ===" | tee -a archive_log.txt
            xcodebuild -exportArchive -archivePath "./ChronicleSync.xcarchive" -exportOptionsPlist ExportOptions.plist -exportPath "./IPA" -verbose 2>&1 | tee -a archive_log.txt
            
            # Check if export was successful
            if [ $? -eq 0 ]; then
              echo "Export successful" | tee -a archive_log.txt
              echo "ARCHIVE_SUCCESS=true" >> $GITHUB_ENV
            else
              echo "Export failed" | tee -a archive_log.txt
              echo "ARCHIVE_SUCCESS=false" >> $GITHUB_ENV
            fi
          else
            echo "Archive failed" | tee -a archive_log.txt
            echo "ARCHIVE_SUCCESS=false" >> $GITHUB_ENV
          fi
      
      - name: Upload archive logs
        uses: actions/upload-artifact@v4
        if: always() && env.BUILD_SUCCESS == 'true'
        with:
          name: ios-archive-logs
          path: extension/ios-tests/ChronicleSync/archive_log.txt
          retention-days: 30
          
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        if: env.BUILD_SUCCESS == 'true' && env.ARCHIVE_SUCCESS == 'true'
        with:
          name: ios-ipa
          path: extension/ios-tests/ChronicleSync/IPA
          retention-days: 30
      
      - name: Test iOS app
        if: env.BUILD_SUCCESS == 'true'
        run: |
          cd extension/ios-tests/ChronicleSync
          
          echo "=== Testing iOS app with simulator: $SIMULATOR_NAME ($SIMULATOR_ID) ===" | tee -a test_log.txt
          
          if [ "$SIMULATOR_ID" == "generic" ]; then
            xcodebuild test -scheme "ChronicleSync" -destination "platform=iOS Simulator,id=dvtdevice-DVTiOSDeviceSimulatorPlaceholder-iphonesimulator:placeholder" -resultBundlePath TestResults.xcresult -verbose 2>&1 | tee -a test_log.txt
          else
            xcodebuild test -scheme "ChronicleSync" -destination "platform=iOS Simulator,id=$SIMULATOR_ID" -resultBundlePath TestResults.xcresult -verbose 2>&1 | tee -a test_log.txt
          fi
          
          # Check if tests were successful
          if [ $? -eq 0 ]; then
            echo "Tests successful" | tee -a test_log.txt
          else
            echo "Tests failed" | tee -a test_log.txt
          fi
      
      - name: Upload test logs
        uses: actions/upload-artifact@v4
        if: always() && env.BUILD_SUCCESS == 'true'
        with:
          name: ios-test-logs
          path: extension/ios-tests/ChronicleSync/test_log.txt
          retention-days: 30
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && env.BUILD_SUCCESS == 'true'
        with:
          name: ios-test-results
          path: extension/ios-tests/ChronicleSync/TestResults.xcresult
          retention-days: 30
      
      - name: Extract screenshots
        if: always() && env.BUILD_SUCCESS == 'true'
        run: |
          cd extension/ios-tests/ChronicleSync
          mkdir -p screenshots
          xcrun xcresulttool get --legacy --path TestResults.xcresult --format json | grep -o '"filename" : ".*\.png"' | awk -F'"' '{print $4}' | xargs -I{} find TestResults.xcresult -name {} -exec cp {} screenshots/ \;
      
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always() && env.BUILD_SUCCESS == 'true'
        with:
          name: ios-screenshots
          path: extension/ios-tests/ChronicleSync/screenshots
          retention-days: 30