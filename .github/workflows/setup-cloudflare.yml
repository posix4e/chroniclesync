name: Setup Cloudflare Resources

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - create-resources
          - update-schema
          - reset-database

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup Cloudflare Resources
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          cd worker
          npm install
          npm install -g wrangler

      - name: Create Resources
        if: github.event.inputs.action == 'create-resources'
        run: |
          # Create D1 database
          wrangler d1 create sync_db
          # Create R2 bucket
          wrangler r2 bucket create sync-storage
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update Schema
        if: github.event.inputs.action == 'update-schema'
        run: |
          # Create clients table
          echo "
          DROP TABLE IF EXISTS clients;
          CREATE TABLE clients (
            client_id TEXT PRIMARY KEY,
            last_sync DATETIME,
            data_size INTEGER
          );
          " > schema.sql
          wrangler d1 execute sync_db --file=schema.sql --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Reset Database
        if: github.event.inputs.action == 'reset-database'
        run: |
          # Drop and recreate all tables
          echo "
          DROP TABLE IF EXISTS clients;
          CREATE TABLE clients (
            client_id TEXT PRIMARY KEY,
            last_sync DATETIME,
            data_size INTEGER
          );
          " > schema.sql
          wrangler d1 execute sync_db --file=schema.sql --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}