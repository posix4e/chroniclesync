name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test (leave empty to test all browsers)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - chromium
          - firefox
          - safari
      api_endpoint:
        description: 'API endpoint to test against'
        required: false
        type: string
        default: 'https://api-staging.chroniclesync.xyz'
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      current_version: ${{ steps.deploy-worker.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json
            worker/package-lock.json

      - name: Test Pages
        working-directory: pages
        env:
          API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz' }}
        run: |
          npm ci
          npm run lint
          npm run test
          npm run build

      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Package Extensions
        working-directory: extension
        run: |
          # Install zip utility
          sudo apt-get update && sudo apt-get install -y zip
          # Run build script with ESM support
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:extension

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: extension/chrome-extension.zip
          retention-days: 14
          
      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firefox-extension
          path: extension/firefox-extension.xpi
          retention-days: 14
          
      - name: Build Safari Extension
        working-directory: extension/safari
        run: |
          ./build-safari-extension.sh
          # Create a zip file for the Safari extension
          cd Shared/Extension\ Files
          zip -r ../../../safari-extension.zip ./*
          
      - name: Upload Safari Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension
          path: extension/safari-extension.zip
          retention-days: 14

      - name: Test Extension
        working-directory: extension
        run: |
          npm run lint
          npm run test

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage

      - name: Install dependencies and run page tests
        working-directory: pages
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
        run: |
          npm ci
          npx playwright install --with-deps
          # Run tests in headless mode for all browsers if no specific browser is selected
          if [ -z "${{ github.event.inputs.browser }}" ]; then
            xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
              npx playwright test
          else
            xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
              npx playwright test --project=${{ github.event.inputs.browser }}
          fi
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-pages
          path: |
            pages/playwright-report/
            pages/test-results/
          retention-days: 30

      - name: Deploy Pages
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main --commit-dirty=true; else npm run deploy -- --branch ${{ github.head_ref }} --commit-dirty=true; fi

      - name: Deploy Worker
        id: deploy-worker
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CURRENT_VERSION=$(wrangler version show --json | jq -r '.version')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            npm run deploy -- --env production
          else
            npm run deploy -- --env staging
          fi

  build-safari-apps:
    needs: build-and-test
    if: success()
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Safari Extension Artifact
        uses: actions/download-artifact@v4
        with:
          name: safari-extension
          path: extension/safari-extension.zip
      
      - name: Extract Safari Extension
        run: |
          mkdir -p extension/safari/Shared/Extension\ Files
          unzip extension/safari-extension.zip -d extension/safari/Shared/Extension\ Files
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      # Safari extension build steps moved to the matrix
      
      - name: Upload macOS App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-macos-app
          path: extension/safari/build/ChronicleSync.app
          retention-days: 14
      
      - name: Upload iOS App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-ios-app
          path: extension/safari/build/ChronicleSync.ipa
          retention-days: 14
      
      - name: Run Safari Extension Tests
        run: |
          cd extension/safari
          xcodebuild test -project ChronicleSync.xcodeproj -scheme "ChronicleSync macOS Tests" -destination "platform=macOS"
          xcodebuild test -project ChronicleSync.xcodeproj -scheme "ChronicleSync iOS Tests" -destination "platform=iOS Simulator,name=iPhone 14"

# Safari extension build is now part of the matrix

  playwright-extension-tests:
    needs: build-and-test
    if: success()
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, safari]
        include:
          - browser: chrome
            os: ubuntu-latest
          - browser: firefox
            os: ubuntu-latest
          - browser: safari
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Skip this job if a specific browser is requested in workflow_dispatch and it's not this one
      - name: Check if this browser should be tested
        id: should_test
        run: |
          SHOULD_TEST="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.browser }}" != "" ]]; then
            if [[ "${{ matrix.browser }}" == "chrome" && "${{ github.event.inputs.browser }}" != "chromium" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "firefox" && "${{ github.event.inputs.browser }}" != "firefox" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "safari" && "${{ github.event.inputs.browser }}" != "safari" ]]; then
              SHOULD_TEST="false"
            fi
          fi
          echo "should_test=${SHOULD_TEST}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        if: steps.should_test.outputs.should_test == 'true'

      - uses: actions/setup-node@v4
        if: steps.should_test.outputs.should_test == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json

      - name: Download extension artifacts
        if: steps.should_test.outputs.should_test == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.browser == 'chrome' && 'chrome-extension' || 'firefox-extension' }}
          path: extension/dist

      - name: Install dependencies and run extension tests
        if: steps.should_test.outputs.should_test == 'true'
        working-directory: extension
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
          APPLE_CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          npm ci
          # Skip Safari-specific steps for Safari matrix
          if [[ "${{ matrix.browser }}" != "safari" ]]; then
            # Install all browsers to ensure dependencies are available
            npx playwright install --with-deps
            # Ensure the specific browser is installed properly
            npx playwright install --with-deps ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
            # Run browser-specific e2e tests with frame buffer
            npm run test:e2e:${{ matrix.browser }}
          else
            # Safari-specific steps
            cd ../safari
            
            # Setup SwiftLint
            brew install swiftlint
            
            # Install Safari Extension Dependencies
            npm install
            
            # Lint Safari Extension Swift Code
            npm run lint:strict
            
            # Setup Apple certificates and provisioning profiles
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
            KEYCHAIN_PASSWORD="temporary"
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            
            # Import certificate to keychain
            CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
            echo -n "$APPLE_CERTIFICATE_CONTENT" | base64 --decode > $CERTIFICATE_PATH
            security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH
            
            # Apply provisioning profile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            PROVISIONING_PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
            echo -n "$APPLE_PROVISIONING_PROFILE" | base64 --decode > "$PROVISIONING_PROFILE_PATH"
            
            # Update export options plists with team ID
            sed -i '' "s/TEAM_ID/$APPLE_TEAM_ID/g" exportOptions-macOS.plist
            sed -i '' "s/TEAM_ID/$APPLE_TEAM_ID/g" exportOptions-iOS.plist
            
            # Setup App Store Connect API
            mkdir -p ~/.appstoreconnect/private_keys
            echo -n "$APPLE_API_KEY_CONTENT" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
            
            # Create API key configuration
            cat > ~/.appstoreconnect/auth.json << EOF
            {
              "key_id": "$APPLE_API_KEY_ID",
              "issuer_id": "$APPLE_API_KEY_ISSUER_ID",
              "key_file": "~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8"
            }
            EOF
            
            # Build Safari Extension for macOS
            mkdir -p build
            
            # Build and archive
            xcodebuild -project ChronicleSync.xcodeproj \
              -scheme "ChronicleSync (macOS)" \
              -configuration Release \
              -archivePath ./build/ChronicleSync-macOS.xcarchive \
              DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
              PRODUCT_BUNDLE_IDENTIFIER=$APPLE_APP_ID \
              archive
            
            # Export archive
            xcodebuild -exportArchive \
              -archivePath ./build/ChronicleSync-macOS.xcarchive \
              -exportOptionsPlist exportOptions-macOS.plist \
              -exportPath ./build
              
            # Build Safari Extension for iOS
            xcodebuild -project ChronicleSync.xcodeproj \
              -scheme "ChronicleSync (iOS)" \
              -configuration Release \
              -destination "generic/platform=iOS" \
              -archivePath ./build/ChronicleSync-iOS.xcarchive \
              DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
              PRODUCT_BUNDLE_IDENTIFIER=$APPLE_APP_ID \
              archive
            
            # Export iOS archive
            xcodebuild -exportArchive \
              -archivePath ./build/ChronicleSync-iOS.xcarchive \
              -exportOptionsPlist exportOptions-iOS.plist \
              -exportPath ./build
              
            # Run Safari Extension Tests
            xcodebuild test -project ChronicleSync.xcodeproj -scheme "ChronicleSync macOS Tests" -destination "platform=macOS"
            xcodebuild test -project ChronicleSync.xcodeproj -scheme "ChronicleSync iOS Tests" -destination "platform=iOS Simulator,name=iPhone 14"
          fi

      - name: Upload test results (Chrome/Firefox)
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser != 'safari' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-${{ matrix.browser }}
          path: |
            extension/playwright-report/
            extension/test-results/${{ matrix.browser == 'chrome' && 'chrome' || 'firefox' }}/
          retention-days: 30
          
      - name: Upload Safari Extension Artifacts
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari' && always()
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension
          path: |
            extension/safari/build/*.app
            extension/safari/build/*.ipa
          retention-days: 7
