name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            worker/package-lock.json

      - name: Test Pages
        working-directory: pages
        env:
          API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz' }}
        run: |
          npm ci
          npm run lint
          npm run test
          npm run build:extension
          npm run build:web

      - name: Package Chrome Extension
        working-directory: pages
        run: |
          cd ..
          zip -r chrome-extension.zip extension/

      - name: Upload Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: chrome-extension.zip
          retention-days: 14

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage

      - name: Deploy Pages
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main --commit-dirty=true; else npm run deploy -- --branch ${{ github.head_ref }} --commit-dirty=true; fi

      - name: Deploy Worker
        id: deploy-worker
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Store current version ID before deployment
            CURRENT_VERSION=$(wrangler version show --json | jq -r '.version')
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
            npm run deploy -- --env production
          else
            npm run deploy -- --env staging
          fi

      - name: Trigger Playwright Tests
        id: playwright
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'playwright-tests.yml',
                ref: context.ref,
                inputs: {
                  browser: 'chromium',
                  debug: 'false'
                }
              });
              // Wait for workflow to complete and check status
              let status = 'pending';
              while (status === 'pending') {
                await new Promise(r => setTimeout(r, 10000)); // Wait 10s
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'playwright-tests.yml',
                  branch: context.ref.replace('refs/heads/', ''),
                  per_page: 1
                });
                if (runs.data.workflow_runs.length > 0) {
                  status = runs.data.workflow_runs[0].status;
                  if (status === 'completed') {
                    if (runs.data.workflow_runs[0].conclusion !== 'success') {
                      throw new Error('Playwright tests failed');
                    }
                    break;
                  }
                }
              }
            } catch (error) {
              core.setFailed(error.message);
              // If on main branch and tests fail, rollback worker
              if ('${{ github.ref }}' === 'refs/heads/main') {
                const exec = require('child_process').execSync;
                exec(`cd worker && wrangler rollback --version ${process.env.CURRENT_VERSION}`, {stdio: 'inherit'});
              }
              throw error;
            }