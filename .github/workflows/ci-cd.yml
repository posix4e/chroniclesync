name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            worker/package-lock.json

      - name: Test Pages
        working-directory: pages
        run: npm ci && npm run lint && npm run test && npm run build

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage

      - name: Package Extension
        run: |
          cd extension
          zip -r ../chroniclesync-extension.zip .

      - name: Upload Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-extension
          path: chroniclesync-extension.zip

      - name: Create Beta Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create beta-$(date +%Y%m%d) chroniclesync-extension.zip \
            --title "Beta Release $(date +%Y-%m-%d)" \
            --notes "Beta release from main branch" \
            --prerelease \
            --target main

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          gh release create $VERSION chroniclesync-extension.zip \
            --title "Release $VERSION" \
            --notes "Release $VERSION" \
            --target main

      - name: Deploy Pages
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main; else npm run deploy -- --branch ${{ github.head_ref }}; fi

      - name: Deploy Worker
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --env production; else npm run deploy -- --env staging; fi
