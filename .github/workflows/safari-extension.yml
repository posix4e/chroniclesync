name: Build Safari Extension

on:
  push:
    branches: [main]
    paths:
      - 'extension/safari/**'
  pull_request:
    branches: [main]
    paths:
      - 'extension/safari/**'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  build-safari-extension:
    name: Build Safari Extension
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: extension/package-lock.json

      - name: Install dependencies
        run: |
          cd extension
          npm ci

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Setup Apple certificates and provisioning profiles
        env:
          APPLE_CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD="temporary"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          echo -n "$APPLE_CERTIFICATE_CONTENT" | base64 --decode > $CERTIFICATE_PATH
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROVISIONING_PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          echo -n "$APPLE_PROVISIONING_PROFILE" | base64 --decode > "$PROVISIONING_PROFILE_PATH"
          
          # Update export options plists with team ID
          cd extension/safari
          sed -i '' "s/TEAM_ID/$APPLE_TEAM_ID/g" exportOptions-macOS.plist
          sed -i '' "s/TEAM_ID/$APPLE_TEAM_ID/g" exportOptions-iOS.plist
      
      - name: Setup App Store Connect API
        env:
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Create App Store Connect API key file
          mkdir -p ~/.appstoreconnect/private_keys
          echo -n "$APPLE_API_KEY_CONTENT" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
          
          # Create API key configuration
          cat > ~/.appstoreconnect/auth.json << EOF
          {
            "key_id": "$APPLE_API_KEY_ID",
            "issuer_id": "$APPLE_API_KEY_ISSUER_ID",
            "key_file": "~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8"
          }
          EOF
          
      - name: Install SwiftLint
        run: |
          brew install swiftlint
          
      - name: Install Safari Extension Dependencies
        run: |
          cd extension/safari
          npm install
          
      - name: Lint Safari Extension Swift Code
        run: |
          cd extension/safari
          npm run lint:strict
      
      - name: Build Safari Extension for macOS
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd extension/safari
          
          # Create build directory
          mkdir -p build
          
          # Build and archive
          xcodebuild -project ChronicleSync.xcodeproj \
            -scheme "ChronicleSync (macOS)" \
            -configuration Release \
            -archivePath ./build/ChronicleSync-macOS.xcarchive \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            PRODUCT_BUNDLE_IDENTIFIER=$APPLE_APP_ID \
            archive
          
          # Export archive
          xcodebuild -exportArchive \
            -archivePath ./build/ChronicleSync-macOS.xcarchive \
            -exportOptionsPlist exportOptions-macOS.plist \
            -exportPath ./build
      
      - name: Build Safari Extension for iOS
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd extension/safari
          
          # Create build directory
          mkdir -p build
          
          # Build and archive
          xcodebuild -project ChronicleSync.xcodeproj \
            -scheme "ChronicleSync (iOS)" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath ./build/ChronicleSync-iOS.xcarchive \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            PRODUCT_BUNDLE_IDENTIFIER=$APPLE_APP_ID \
            archive
          
          # Export archive
          xcodebuild -exportArchive \
            -archivePath ./build/ChronicleSync-iOS.xcarchive \
            -exportOptionsPlist exportOptions-iOS.plist \
            -exportPath ./build
            
      - name: Upload Safari Extension Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension
          path: |
            extension/safari/build/*.app
            extension/safari/build/*.ipa
          retention-days: 7
          
      - name: Run Safari Extension Tests
        run: |
          cd extension/safari
          xcodebuild test -project ChronicleSync.xcodeproj -scheme "ChronicleSync macOS Tests" -destination "platform=macOS"
          xcodebuild test -project ChronicleSync.xcodeproj -scheme "ChronicleSync iOS Tests" -destination "platform=iOS Simulator,name=iPhone 14"