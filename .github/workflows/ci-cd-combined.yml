name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - 'pages/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'pages/**'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test (leave empty to test all browsers)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - chromium
          - firefox
          - safari
      api_endpoint:
        description: 'API endpoint to test against'
        required: false
        type: string
        default: 'https://api-staging.chroniclesync.xyz'
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      current_version: ${{ steps.deploy-worker.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json
            worker/package-lock.json



      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Package Extensions
        working-directory: extension
        run: |
          # Install zip utility
          sudo apt-get update && sudo apt-get install -y zip
          # Run build script with ESM support
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:extension

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: extension/chrome-extension.zip
          retention-days: 14
          
      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firefox-extension
          path: extension/firefox-extension.xpi
          retention-days: 14

      - name: Test Extension
        working-directory: extension
        run: |
          npm run lint
          npm run test

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage



      - name: Deploy Worker
        id: deploy-worker
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CURRENT_VERSION=$(wrangler version show --json | jq -r '.version')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            npm run deploy -- --env production
          else
            npm run deploy -- --env staging
          fi

  playwright-extension-tests:
    needs: build-and-test
    if: success()
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        # Future platforms can be added here (e.g., ios, android)
    runs-on: ubuntu-latest
    steps:
      # Skip this job if a specific browser is requested in workflow_dispatch and it's not this one
      - name: Check if this browser should be tested
        id: should_test
        run: |
          SHOULD_TEST="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.browser }}" != "" ]]; then
            if [[ "${{ matrix.browser }}" == "chrome" && "${{ github.event.inputs.browser }}" != "chromium" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "firefox" && "${{ github.event.inputs.browser }}" != "firefox" ]]; then
              SHOULD_TEST="false"
            fi
          fi
          echo "should_test=${SHOULD_TEST}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        if: steps.should_test.outputs.should_test == 'true'

      - uses: actions/setup-node@v4
        if: steps.should_test.outputs.should_test == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json

      - name: Download extension artifacts
        if: steps.should_test.outputs.should_test == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.browser == 'chrome' && 'chrome-extension' || 'firefox-extension' }}
          path: extension/dist

      - name: Install dependencies and run extension tests
        if: steps.should_test.outputs.should_test == 'true'
        working-directory: extension
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
        run: |
          npm ci
          # Install all browsers to ensure dependencies are available
          npx playwright install --with-deps
          # Ensure the specific browser is installed properly
          npx playwright install --with-deps ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
          # Run browser-specific e2e tests with frame buffer
          npm run test:e2e:${{ matrix.browser }}

      - name: Upload test results
        if: steps.should_test.outputs.should_test == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-${{ matrix.browser }}
          path: |
            extension/playwright-report/
            extension/test-results/${{ matrix.browser == 'chrome' && 'chrome' || 'firefox' }}/
          retention-days: 30

  build-safari-extension:
    needs: build-and-test
    if: success() && (github.event.inputs.browser == '' || github.event.inputs.browser == 'safari')
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            extension/package-lock.json

      - name: Download extension artifacts
        uses: actions/download-artifact@v4
        with:
          name: chrome-extension
          path: extension/dist

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install the Apple certificate
        env:
          CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$CERTIFICATE_CONTENT" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
      - name: Install the provisioning profiles
        env:
          APP_PROVISIONING_PROFILE: ${{ secrets.APPLE_APP_PROVISIONING_PROFILE }}
          EXTENSION_PROVISIONING_PROFILE: ${{ secrets.APPLE_EXTENSION_PROVISIONING_PROFILE }}
          PROVISIONING_PROFILE_CONTENT: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: |
          # Create directory for provisioning profiles if it doesn't exist
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Import app provisioning profile from secrets
          if [ ! -z "$APP_PROVISIONING_PROFILE" ]; then
            APP_PROFILE_PATH=$RUNNER_TEMP/app_profile.mobileprovision
            echo -n "$APP_PROVISIONING_PROFILE" | base64 --decode -o $APP_PROFILE_PATH
            
            # Copy app provisioning profile with specific name
            cp $APP_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/ChronicleSync_Profile.mobileprovision
            echo "Installed app provisioning profile"
          else
            echo "WARNING: APP_PROVISIONING_PROFILE is not set"
          fi
          
          # Import extension provisioning profile from secrets
          if [ ! -z "$EXTENSION_PROVISIONING_PROFILE" ]; then
            EXT_PROFILE_PATH=$RUNNER_TEMP/extension_profile.mobileprovision
            echo -n "$EXTENSION_PROVISIONING_PROFILE" | base64 --decode -o $EXT_PROFILE_PATH
            
            # Copy extension provisioning profile with specific name
            cp $EXT_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/ChronicleSync_Extension_Profile.mobileprovision
            echo "Installed extension provisioning profile"
          else
            echo "WARNING: EXTENSION_PROVISIONING_PROFILE is not set"
          fi
          
          # For backward compatibility
          if [ ! -z "$PROVISIONING_PROFILE_CONTENT" ]; then
            PROFILE_PATH=$RUNNER_TEMP/profile.mobileprovision
            echo -n "$PROVISIONING_PROFILE_CONTENT" | base64 --decode -o $PROFILE_PATH
            cp $PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/ChronicleSync_Profile.mobileprovision
            echo "Installed legacy provisioning profile"
          fi
          
          # Debug: List installed provisioning profiles
          echo "Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Prepare Safari Extension
        run: |
          # Create necessary directories
          mkdir -p "safari-extension/ChronicleSync Extension/Resources"
          
          # Copy extension files to Safari extension
          cp extension/popup.html "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/popup.css "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/settings.html "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/settings.css "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/history.html "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/history.css "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/devtools.html "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/devtools.css "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/bip39-wordlist.js "safari-extension/ChronicleSync Extension/Resources/"
          
          # Extract and copy JS files from the Chrome extension
          unzip -o extension/dist/chrome-extension.zip -d extension/dist/extracted
          cp extension/dist/extracted/popup.js "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/dist/extracted/background.js "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/dist/extracted/settings.js "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/dist/extracted/history.js "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/dist/extracted/devtools.js "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/dist/extracted/devtools-page.js "safari-extension/ChronicleSync Extension/Resources/"
          cp extension/dist/extracted/content-script.js "safari-extension/ChronicleSync Extension/Resources/"
          
          # Copy assets directory if it exists
          if [ -d "extension/dist/extracted/assets" ]; then
            mkdir -p "safari-extension/ChronicleSync Extension/Resources/assets"
            cp -R extension/dist/extracted/assets/* "safari-extension/ChronicleSync Extension/Resources/assets/"
          fi

      - name: Build Safari Extension
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd safari-extension
          
          # Create a temporary exportOptions.plist with the correct team ID and manual signing
          cat > exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>${APPLE_TEAM_ID}</string>
              <key>compileBitcode</key>
              <false/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${APPLE_APP_ID}</key>
                  <string>ChronicleSync_Profile</string>
                  <key>${APPLE_APP_ID}.extension</key>
                  <string>ChronicleSync_Extension_Profile</string>
              </dict>
          </dict>
          </plist>
          EOL
          
          # Build and sign the app with manual signing
          xcodebuild -project ChronicleSync.xcodeproj -scheme "ChronicleSync" -configuration Release -sdk iphoneos -archivePath "build/ChronicleSync.xcarchive" archive \
            DEVELOPMENT_TEAM="${APPLE_TEAM_ID}" \
            PRODUCT_BUNDLE_IDENTIFIER="${APPLE_APP_ID}" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="ChronicleSync_Profile"
          
          # Export the archive as IPA
          xcodebuild -exportArchive -archivePath "build/ChronicleSync.xcarchive" -exportOptionsPlist exportOptions.plist -exportPath "build" \
            DEVELOPMENT_TEAM="${APPLE_TEAM_ID}" \
            PRODUCT_BUNDLE_IDENTIFIER="${APPLE_APP_ID}"

      - name: Test Safari Extension
        env:
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd safari-extension
          # Start simulator
          DEVICE_ID=$(xcrun simctl list devices available | grep "iPhone" | head -1 | sed -E 's/.*\(([A-Za-z0-9-]+)\).*/\1/')
          xcrun simctl boot "$DEVICE_ID"
          
          # Install app
          xcrun simctl install "$DEVICE_ID" "build/ChronicleSync.app"
          
          # Launch app
          xcrun simctl launch "$DEVICE_ID" "${APPLE_APP_ID}"
          
          # Wait for app to fully launch
          sleep 5
          
          # Take screenshot
          mkdir -p screenshots
          xcrun simctl io "$DEVICE_ID" screenshot "screenshots/chroniclesync_screenshot.png"
          
          # Shutdown simulator
          xcrun simctl shutdown "$DEVICE_ID"

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension-ipa
          path: safari-extension/build/ChronicleSync.ipa
          retention-days: 14
          
      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension-screenshot
          path: safari-extension/screenshots/chroniclesync_screenshot.png
          retention-days: 14
