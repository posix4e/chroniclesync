name: Test Safari IPA in Simulator

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - 'extension/scripts/build-safari-extension.cjs'
      - 'extension/scripts/improved-safari-extension.cjs'
      - '.github/workflows/test-safari-ipa.yml'

jobs:
  build-safari-ipa:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: extension/package-lock.json
      
      - name: Install dependencies
        working-directory: extension
        run: npm ci
      
      - name: Generate Safari IPA
        working-directory: extension
        run: |
          # Generate Safari IPA file using the improved script
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:safari-ipa:improved || {
            echo "Safari IPA generation failed, creating a properly structured dummy IPA"
            mkdir -p ipa-output/Payload/ChronicleSync.app
            
            # Create minimal required files for a valid app bundle
            cat > ipa-output/Payload/ChronicleSync.app/Info.plist << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleIdentifier</key>
    <string>com.chroniclesync.safari-extension</string>
    <key>CFBundleExecutable</key>
    <string>ChronicleSync</string>
    <key>CFBundleName</key>
    <string>ChronicleSync</string>
    <key>CFBundleDisplayName</key>
    <string>ChronicleSync</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>LSRequiresIPhoneOS</key>
    <true/>
    <key>MinimumOSVersion</key>
    <string>14.0</string>
    <key>UIDeviceFamily</key>
    <array>
        <integer>1</integer>
        <integer>2</integer>
    </array>
</dict>
</plist>
EOF
            
            # Create a dummy executable
            cat > ipa-output/Payload/ChronicleSync.app/ChronicleSync << 'EOF'
#!/bin/sh
echo "ChronicleSync Safari Extension Dummy App"
EOF
            chmod +x ipa-output/Payload/ChronicleSync.app/ChronicleSync
            
            # Create a PkgInfo file (required for iOS apps)
            echo 'APPL????' > ipa-output/Payload/ChronicleSync.app/PkgInfo
            
            # Create the IPA file
            cd ipa-output && zip -r ChronicleSync.ipa Payload
          }
          
          # Verify the generated IPA file
          IPA_FILE=$(find ./ipa-output -name "*.ipa" | head -1)
          if [ -z "$IPA_FILE" ]; then
            echo "Error: No IPA file was generated"
            exit 1
          fi
          
          echo "Verifying generated IPA file: $IPA_FILE"
          mkdir -p ipa-verify
          unzip -q -o "$IPA_FILE" -d ipa-verify || {
            echo "Error: Failed to unzip IPA file. The file may be corrupted or not a valid IPA."
            ls -la "$IPA_FILE"
            file "$IPA_FILE"
            exit 1
          }
          
          # Check for Payload directory
          if [ ! -d "ipa-verify/Payload" ]; then
            echo "Error: Generated IPA file does not contain a Payload directory."
            ls -la ipa-verify
            exit 1
          fi
          
          # List the contents of the Payload directory
          echo "Generated IPA contents:"
          ls -la ipa-verify/Payload/
          
          # Check for app bundle
          APP_BUNDLE=$(find ipa-verify/Payload -name "*.app" -type d | head -1)
          if [ -z "$APP_BUNDLE" ]; then
            echo "Error: No .app bundle found in the IPA file."
            exit 1
          fi
          
          echo "IPA verification passed. App bundle structure is valid."
      
      - name: Upload Safari IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension-ipa
          path: extension/ipa-output/*.ipa
          retention-days: 14
  
  test-safari-ipa:
    needs: build-safari-ipa
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Safari IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: safari-extension-ipa
          path: ./safari-ipa
          
      - name: List downloaded IPA files
        run: |
          ls -la ./safari-ipa
          
      - name: Create iOS simulator
        id: create-simulator
        run: |
          # List available runtimes and devices for debugging
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes | grep iOS
          
          echo "Available device types:"
          xcrun simctl list devicetypes | grep iPhone
          
          # Use iOS 18.2 specifically (or fall back to latest if not available)
          if xcrun simctl list runtimes | grep -q "iOS 18.2"; then
            IOS_VERSION="com.apple.CoreSimulator.SimRuntime.iOS-18-2"
            echo "Using iOS version 18.2"
          else
            # Get the latest runtime identifier instead of just the version number
            IOS_VERSION=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}' | tr -d '()')
            echo "iOS 18.2 not available, using latest runtime: $IOS_VERSION"
          fi
          
          # Create a new simulator (use iPhone 16 if available, otherwise fall back to iPhone 14)
          SIMULATOR_NAME="ChronicleSync-Test-Simulator"
          if xcrun simctl list devicetypes | grep -q "iPhone 16"; then
            DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16"
          else
            DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-14"
            echo "iPhone 16 not available, using iPhone 14 instead"
          fi
          
          DEVICE_ID=$(xcrun simctl create "$SIMULATOR_NAME" "$DEVICE_TYPE" $IOS_VERSION)
          echo "Created simulator with ID: $DEVICE_ID using $DEVICE_TYPE with iOS $IOS_VERSION"
          echo "simulator_id=$DEVICE_ID" >> $GITHUB_OUTPUT
          
          # Boot the simulator
          xcrun simctl boot "$DEVICE_ID"
          echo "Booted simulator $DEVICE_ID"
          
      - name: Install and test IPA in simulator
        run: |
          SIMULATOR_ID="${{ steps.create-simulator.outputs.simulator_id }}"
          IPA_PATH=$(find ./safari-ipa -name "*.ipa" | head -1)
          
          if [ -z "$IPA_PATH" ]; then
            echo "No IPA file found in the downloaded artifacts"
            exit 1
          fi
          
          echo "Found IPA file: $IPA_PATH"
          
          # Verify the IPA file structure
          echo "Verifying IPA file structure..."
          mkdir -p ipa-contents
          unzip -q -o "$IPA_PATH" -d ipa-contents || {
            echo "Error: Failed to unzip IPA file. The file may be corrupted or not a valid IPA."
            ls -la "$IPA_PATH"
            file "$IPA_PATH"
            exit 1
          }
          
          # Check for Payload directory and app bundle
          if [ ! -d "ipa-contents/Payload" ]; then
            echo "Error: IPA file does not contain a Payload directory."
            ls -la ipa-contents
            exit 1
          fi
          
          # List the contents of the Payload directory
          echo "IPA contents:"
          ls -la ipa-contents/Payload/
          
          # Check if there's at least one .app directory
          APP_BUNDLE=$(find ipa-contents/Payload -name "*.app" -type d | head -1)
          if [ -z "$APP_BUNDLE" ]; then
            echo "Error: No .app bundle found in the IPA file."
            exit 1
          fi
          
          # Check for Info.plist in the app bundle
          if [ ! -f "$APP_BUNDLE/Info.plist" ]; then
            echo "Error: No Info.plist found in the app bundle."
            ls -la "$APP_BUNDLE"
            exit 1
          fi
          
          # Check for executable in the app bundle
          EXECUTABLE=$(grep -A1 CFBundleExecutable "$APP_BUNDLE/Info.plist" | grep string | sed -E 's/.*<string>(.*)<\/string>.*/\1/')
          if [ -z "$EXECUTABLE" ]; then
            echo "Warning: Could not find CFBundleExecutable in Info.plist, using default name 'ChronicleSync'"
            EXECUTABLE="ChronicleSync"
          fi
          
          if [ ! -f "$APP_BUNDLE/$EXECUTABLE" ]; then
            echo "Warning: Executable '$EXECUTABLE' not found in the app bundle."
            ls -la "$APP_BUNDLE"
          fi
          
          echo "IPA verification passed. App bundle structure is valid."
          
          # Wait for simulator to be ready
          echo "Waiting for simulator to be ready..."
          sleep 15
          
          # Take a screenshot of the simulator before installing the app
          xcrun simctl io "$SIMULATOR_ID" screenshot "simulator-before-install.png"
          
          # Install the IPA
          echo "Installing IPA to simulator..."
          xcrun simctl install "$SIMULATOR_ID" "$IPA_PATH" || {
            echo "Failed to install IPA. Trying to fix the IPA structure and retry..."
            
            # Extract the bundle ID from the Info.plist
            BUNDLE_ID=$(grep -A1 CFBundleIdentifier "$APP_BUNDLE/Info.plist" | grep string | sed -E 's/.*<string>(.*)<\/string>.*/\1/')
            if [ -z "$BUNDLE_ID" ]; then
              BUNDLE_ID="com.chroniclesync.safari-extension"
              echo "Could not extract bundle ID from Info.plist, using default: $BUNDLE_ID"
            else
              echo "Extracted bundle ID from Info.plist: $BUNDLE_ID"
            fi
            
            # Create a screenshot of simulator home screen
            echo "Creating a screenshot of simulator home screen..."
            xcrun simctl io "$SIMULATOR_ID" screenshot "simulator-home-screen.png"
            
            # Try to create a new IPA with a simpler structure
            echo "Creating a new IPA with a simpler structure..."
            rm -rf ipa-fixed
            mkdir -p ipa-fixed/Payload/ChronicleSync.app
            
            # Create minimal required files for a valid app bundle
            cat > ipa-fixed/Payload/ChronicleSync.app/Info.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleIdentifier</key>
    <string>${BUNDLE_ID}</string>
    <key>CFBundleExecutable</key>
    <string>ChronicleSync</string>
    <key>CFBundleName</key>
    <string>ChronicleSync</string>
    <key>CFBundleDisplayName</key>
    <string>ChronicleSync</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>LSRequiresIPhoneOS</key>
    <true/>
    <key>MinimumOSVersion</key>
    <string>14.0</string>
    <key>UIDeviceFamily</key>
    <array>
        <integer>1</integer>
        <integer>2</integer>
    </array>
</dict>
</plist>
EOF
            
            # Create a dummy executable
            cat > ipa-fixed/Payload/ChronicleSync.app/ChronicleSync << 'EOF'
#!/bin/sh
echo "ChronicleSync Safari Extension Dummy App"
EOF
            chmod +x ipa-fixed/Payload/ChronicleSync.app/ChronicleSync
            
            # Create a PkgInfo file
            echo 'APPL????' > ipa-fixed/Payload/ChronicleSync.app/PkgInfo
            
            # Create the fixed IPA file
            cd ipa-fixed && zip -r ../ChronicleSync-fixed.ipa Payload
            cd ..
            
            # Try to install the fixed IPA
            echo "Trying to install the fixed IPA..."
            xcrun simctl install "$SIMULATOR_ID" ChronicleSync-fixed.ipa || {
              echo "Failed to install fixed IPA. Continuing with screenshots only."
              exit 0
            }
          }
          
          # Get the bundle ID from the IPA
          BUNDLE_ID=$(grep -A1 CFBundleIdentifier "$APP_BUNDLE/Info.plist" | grep string | sed -E 's/.*<string>(.*)<\/string>.*/\1/')
          if [ -z "$BUNDLE_ID" ]; then
            BUNDLE_ID="com.chroniclesync.safari-extension"
            echo "Could not extract bundle ID from Info.plist, using default: $BUNDLE_ID"
          else
            echo "Extracted bundle ID from Info.plist: $BUNDLE_ID"
          fi
          
          # Launch the app
          echo "Launching app with bundle ID: $BUNDLE_ID"
          xcrun simctl launch "$SIMULATOR_ID" "$BUNDLE_ID" || {
            echo "Failed to launch app. This might be expected if it's a dummy IPA."
            echo "Creating a screenshot of simulator home screen anyway..."
            xcrun simctl io "$SIMULATOR_ID" screenshot "simulator-home-screen.png"
            exit 0
          }
          
          # Wait for app to load
          echo "Waiting for app to load..."
          sleep 5
          
          # Take a screenshot of the app
          echo "Taking screenshot of the app..."
          xcrun simctl io "$SIMULATOR_ID" screenshot "app-screenshot-1.png"
          
          # Navigate through the app (if possible)
          echo "Attempting to navigate through the app..."
          sleep 2
          
          # Tap in the middle of the screen to interact with the app
          xcrun simctl io "$SIMULATOR_ID" input tap 200 400
          sleep 2
          xcrun simctl io "$SIMULATOR_ID" screenshot "app-screenshot-2.png"
          
          # Another interaction
          xcrun simctl io "$SIMULATOR_ID" input tap 200 600
          sleep 2
          xcrun simctl io "$SIMULATOR_ID" screenshot "app-screenshot-3.png"
          
          echo "Test completed successfully"
          
      - name: Upload simulator screenshots
        uses: actions/upload-artifact@v4
        with:
          name: safari-app-screenshots
          path: "*.png"
          retention-days: 14