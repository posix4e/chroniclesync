#!/bin/bash
set -e

APP_NAME="{{APP_NAME}}"
BUNDLE_ID="{{BUNDLE_ID}}"
TEAM_ID="{{TEAM_ID}}"
EXTENSION_DIR="Extension/Resources"

# Set up certificates and provisioning profiles if available
if [ ! -z "$APPLE_CERTIFICATE_CONTENT" ] && [ ! -z "$APPLE_CERTIFICATE_PASSWORD" ]; then
  echo "Setting up certificates and provisioning profiles..."
  
  # Create keychain
  KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  KEYCHAIN_PASSWORD="temporary-password"
  security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  
  # Import certificate
  echo "$APPLE_CERTIFICATE_CONTENT" | base64 --decode > certificate.p12
  security import certificate.p12 -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  security list-keychain -d user -s $KEYCHAIN_PATH
  
  # Set up provisioning profile
  if [ ! -z "$APPLE_PROVISIONING_PROFILE" ]; then
    mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    echo "$APPLE_PROVISIONING_PROFILE" | base64 --decode > provisioning_profile.mobileprovision
    cp provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
  fi
fi

# Create build directory
BUILD_DIR="build"
mkdir -p "$BUILD_DIR"

# Create xcconfig file
cat > "$APP_NAME.xcconfig" << EOF
DEVELOPMENT_TEAM = $TEAM_ID
PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_ID
PRODUCT_BUNDLE_IDENTIFIER_EXTENSION = $BUNDLE_ID.Extension
CODE_SIGN_STYLE = Automatic
CODE_SIGN_IDENTITY = Apple Development
IPHONEOS_DEPLOYMENT_TARGET = 15.0
TARGETED_DEVICE_FAMILY = 1,2
SWIFT_VERSION = 5.0
ENABLE_BITCODE = NO
EOF

# Create a simple Xcode project using Swift Package Manager
cat > Package.swift << EOF
// swift-tools-version:5.5
import PackageDescription

let package = Package(
    name: "$APP_NAME",
    platforms: [.iOS(.v15)],
    products: [
        .library(name: "$APP_NAME", targets: ["$APP_NAME"]),
        .library(name: "${APP_NAME}Extension", targets: ["${APP_NAME}Extension"])
    ],
    targets: [
        .target(name: "$APP_NAME"),
        .target(name: "${APP_NAME}Extension")
    ]
)
EOF

# Create export options plist
cat > exportOptions.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>method</key>
  <string>development</string>
  <key>teamID</key>
  <string>$TEAM_ID</string>
  <key>compileBitcode</key>
  <false/>
  <key>provisioningProfiles</key>
  <dict>
    <key>$BUNDLE_ID</key>
    <string>iOS Team Provisioning Profile: $BUNDLE_ID</string>
    <key>$BUNDLE_ID.Extension</key>
    <string>iOS Team Provisioning Profile: $BUNDLE_ID.Extension</string>
  </dict>
</dict>
</plist>
EOF

# Build the app using xcodebuild - no fallbacks, must succeed
echo "Building iOS app with Safari extension..."
xcodebuild -project "$APP_NAME.xcodeproj" \
  -scheme "$APP_NAME" \
  -configuration Release \
  -sdk iphoneos \
  -xcconfig "$APP_NAME.xcconfig" \
  -allowProvisioningUpdates \
  DEVELOPMENT_TEAM="$TEAM_ID" \
  PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
  clean archive -archivePath "$BUILD_DIR/$APP_NAME.xcarchive"

# Create IPA file - no fallbacks, must succeed
xcodebuild -exportArchive \
  -archivePath "$BUILD_DIR/$APP_NAME.xcarchive" \
  -exportOptionsPlist exportOptions.plist \
  -exportPath "$BUILD_DIR"

echo "IPA file created at $BUILD_DIR/$APP_NAME.ipa"