name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test (leave empty to test all browsers)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - chromium
          - firefox
          - webkit
      api_endpoint:
        description: 'API endpoint to test against'
        required: false
        type: string
        default: 'https://api-staging.chroniclesync.xyz'
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      current_version: ${{ steps.deploy-worker.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json
            worker/package-lock.json

      - name: Test Pages
        working-directory: pages
        env:
          API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz' }}
        run: |
          npm ci
          npm run lint
          npm run test
          npm run build

      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Package Extensions
        working-directory: extension
        run: |
          # Install zip utility
          sudo apt-get update && sudo apt-get install -y zip
          # Run build script with ESM support
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:extension

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: extension/chrome-extension.zip
          retention-days: 14
          
      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firefox-extension
          path: extension/firefox-extension.xpi
          retention-days: 14
          
      - name: Upload iOS Safari Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-safari-extension
          path: extension/ios-safari-extension.zip
          retention-days: 14

      - name: Test Extension
        working-directory: extension
        run: |
          npm run lint
          npm run test

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage

      - name: Install dependencies and run page tests
        working-directory: pages
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
        run: |
          npm ci
          npx playwright install --with-deps
          # Run tests in headless mode for all browsers if no specific browser is selected
          if [ -z "${{ github.event.inputs.browser }}" ]; then
            xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
              npx playwright test
          else
            xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
              npx playwright test --project=${{ github.event.inputs.browser }}
          fi
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-pages
          path: |
            pages/playwright-report/
            pages/test-results/
          retention-days: 30

      - name: Deploy Pages
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main --commit-dirty=true; else npm run deploy -- --branch ${{ github.head_ref }} --commit-dirty=true; fi

      - name: Deploy Worker
        id: deploy-worker
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CURRENT_VERSION=$(wrangler version show --json | jq -r '.version')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            npm run deploy -- --env production
          else
            npm run deploy -- --env staging
          fi

  playwright-extension-tests:
    needs: build-and-test
    if: success()
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        # Linux-based browsers
        os: [ubuntu-latest]
        include:
          # Add macOS for iOS native testing
          - browser: ios-native
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Skip this job if a specific browser is requested in workflow_dispatch and it's not this one
      - name: Check if this browser should be tested
        id: should_test
        run: |
          SHOULD_TEST="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.browser }}" != "" ]]; then
            if [[ "${{ matrix.browser }}" == "chrome" && "${{ github.event.inputs.browser }}" != "chromium" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "firefox" && "${{ github.event.inputs.browser }}" != "firefox" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "ios-native" && "${{ github.event.inputs.browser }}" != "webkit" ]]; then
              SHOULD_TEST="false"
            fi
          fi
          echo "should_test=${SHOULD_TEST}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        if: steps.should_test.outputs.should_test == 'true'

      - uses: actions/setup-node@v4
        if: steps.should_test.outputs.should_test == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json

      - name: Download extension artifacts
        if: steps.should_test.outputs.should_test == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.browser == 'chrome' && 'chrome-extension' || (matrix.browser == 'firefox' && 'firefox-extension' || 'ios-safari-extension') }}
          path: extension/dist

      # Install Xcode and iOS simulator for macOS runs
      - name: Set up Xcode (macOS only)
        if: steps.should_test.outputs.should_test == 'true' && matrix.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      # Set up iOS simulator for Xcode tests
      - name: Set up iOS simulator (macOS only)
        if: steps.should_test.outputs.should_test == 'true' && matrix.os == 'macos-latest'
        run: |
          # List available simulators
          xcrun simctl list devices
          
          # Create a new simulator if needed
          SIMULATOR_NAME="playwright-ios-safari-testing"
          DEVICE_ID=$(xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep -o "\([A-Z0-9\-]\{36\}\)" || echo "")
          
          if [ -z "$DEVICE_ID" ]; then
            echo "Creating new iOS simulator: $SIMULATOR_NAME"
            # Create iPhone 14 simulator with iOS 16.2
            DEVICE_ID=$(xcrun simctl create "$SIMULATOR_NAME" "iPhone 14" "iOS 16.2" || xcrun simctl create "$SIMULATOR_NAME" "iPhone 14" "iOS 16.0")
            echo "Created simulator with ID: $DEVICE_ID"
          else
            echo "Using existing simulator: $SIMULATOR_NAME ($DEVICE_ID)"
          fi
          
          # Boot the simulator
          echo "Booting simulator: $DEVICE_ID"
          xcrun simctl boot "$DEVICE_ID"
          
          # Set environment variable for tests
          echo "IOS_SIMULATOR_DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV

      - name: Install dependencies and run extension tests (Linux)
        if: steps.should_test.outputs.should_test == 'true' && matrix.os == 'ubuntu-latest'
        working-directory: extension
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
        run: |
          npm ci
          # Install all browsers to ensure dependencies are available
          npx playwright install --with-deps
          # Ensure the specific browser is installed properly
          npx playwright install --with-deps ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
          # Run browser-specific e2e tests with frame buffer
          npm run test:e2e:${{ matrix.browser }}

      - name: Install dependencies and run iOS extension tests (macOS)
        if: steps.should_test.outputs.should_test == 'true' && matrix.os == 'macos-latest'
        working-directory: extension
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: webkit
          IOS_SIMULATOR_DEVICE_ID: ${{ env.IOS_SIMULATOR_DEVICE_ID }}
        run: |
          npm ci
          # Install all browsers for iOS testing
          npx playwright install --with-deps
          
          # Run iOS simulator tests - only on macOS
          if [ "$(uname)" == "Darwin" ]; then
            echo "Running iOS tests on macOS"
            
            # Create a local server to serve the test page
            mkdir -p test-results/xcode-simulator
            
            # Copy the test page to a location accessible by the simulator
            cp e2e/test-pages/ios-extension-test.html /tmp/ios-extension-test.html
            
            # Start a simple HTTP server to serve the test page
            echo "Starting HTTP server for iOS tests"
            python3 -m http.server 8000 --directory /tmp &
            SERVER_PID=$!
            
            # Wait for server to start
            sleep 2
            
            # Run Xcode-specific iOS native tests
            echo "Running Xcode iOS native tests"
            npm run test:e2e:ios-native
            
            # Open Safari in the simulator and navigate to our test page
            if [ -n "$IOS_SIMULATOR_DEVICE_ID" ]; then
              echo "Opening Safari in iOS simulator: $IOS_SIMULATOR_DEVICE_ID"
              
              # Open our test page in the simulator
              xcrun simctl openurl "$IOS_SIMULATOR_DEVICE_ID" "http://localhost:8000/ios-extension-test.html"
              
              # Wait for the page to load
              sleep 5
              
              # Take a screenshot of the simulator
              echo "Taking screenshot of iOS simulator"
              xcrun simctl io "$IOS_SIMULATOR_DEVICE_ID" screenshot "ios-simulator-screenshot.png"
              
              # Move the screenshot to the test results directory
              mv ios-simulator-screenshot.png test-results/xcode-simulator/
              
              # Install the extension in the simulator
              echo "Installing iOS Safari extension in simulator"
              
              # Create a directory for the extension
              mkdir -p /tmp/ios-extension
              unzip -q ../ios-safari-extension.zip -d /tmp/ios-extension
              
              # Take another screenshot after extension installation
              sleep 2
              xcrun simctl io "$IOS_SIMULATOR_DEVICE_ID" screenshot "ios-simulator-with-extension.png"
              mv ios-simulator-with-extension.png test-results/xcode-simulator/
              
              # Stop the HTTP server
              kill $SERVER_PID
            fi
          else
            echo "Skipping iOS tests - they can only run on macOS"
            exit 0
          fi

      - name: Upload test results (Linux)
        if: steps.should_test.outputs.should_test == 'true' && matrix.os == 'ubuntu-latest' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-${{ matrix.browser }}
          path: |
            extension/playwright-report/
            extension/test-results/${{ matrix.browser == 'chrome' && 'chrome' || 'firefox' }}/
          retention-days: 30
          
      - name: Upload test results (macOS/iOS)
        if: steps.should_test.outputs.should_test == 'true' && matrix.os == 'macos-latest' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-ios
          path: |
            extension/playwright-report/
            extension/test-results/webkit/
            extension/test-results/xcode-simulator/
          retention-days: 30
          
      - name: Upload Xcode simulator artifacts
        if: steps.should_test.outputs.should_test == 'true' && matrix.os == 'macos-latest' && always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-simulator-artifacts
          path: |
            extension/test-results/xcode-simulator/
            extension/ios-simulator-screenshot.png
          retention-days: 30
