name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            worker/package-lock.json

      - name: Test Pages
        working-directory: pages
        run: |
          npm ci
          npm run lint
          npm run test
          npm run build:web
          npm run build:extension

      - name: Package Chrome Extension
        working-directory: pages
        run: |
          cd ..
          zip -r chrome-extension.zip extension/

      - name: Upload Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: chrome-extension.zip
          retention-days: 14

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage

      - name: Deploy Pages
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main; else npm run deploy -- --branch ${{ github.head_ref }}; fi

      - name: Deploy Worker
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --env production; else npm run deploy -- --env staging; fi


      - name: Install Xvfb
        if: github.event.pull_request.base.ref == 'main'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Run E2E Tests Against Staging
        if: github.event.pull_request.base.ref == 'main'
        working-directory: pages
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          STAGING_WORKER_URL: ${{ secrets.STAGING_WORKER_URL }}
        run: |
          npm ci
          npx playwright install --with-deps chromium
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" npx playwright test

      - name: Upload E2E Test Results
        if: always() && github.event.pull_request.base.ref == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: pages/playwright-report/
          retention-days: 30

      - name: Package Test Screenshots
        working-directory: pages
        run: |
          mkdir -p test-results
          cd test-results
          if [ -f extension-popup.png ]; then
            zip -r ../test-screenshots.zip *.png
          else
            echo "No screenshots found"
            touch empty.txt
            zip -r ../test-screenshots.zip empty.txt
          fi

      - name: Upload Test Screenshots Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: pages/test-screenshots.zip
          retention-days: 14

