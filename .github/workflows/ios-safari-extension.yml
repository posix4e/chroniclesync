name: iOS Safari Extension CI

on:
  push:
    branches: [ main ]
    paths:
      - 'ios-safari-extension/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ios-safari-extension/**'
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      # Setup code signing
      - name: Install the Apple certificate and provisioning profile
        if: github.event_name != 'pull_request'
        env:
          APPLE_CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          # Verify credentials are available
          if [ -z "$APPLE_CERTIFICATE_CONTENT" ] || [ -z "$APPLE_CERTIFICATE_PASSWORD" ] || [ -z "$APPLE_PROVISIONING_PROFILE" ]; then
            echo "Error: Required Apple credentials are missing. Cannot proceed with code signing."
            exit 1
          fi
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate to keychain
          echo "$APPLE_CERTIFICATE_CONTENT" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Create provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$APPLE_PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      
      # Setup App Store Connect API
      - name: Setup App Store Connect API Key
        if: github.event_name != 'pull_request'
        env:
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Verify API credentials are available
          if [ -z "$APPLE_API_KEY_CONTENT" ] || [ -z "$APPLE_API_KEY_ID" ] || [ -z "$APPLE_API_KEY_ISSUER_ID" ]; then
            echo "Error: Required App Store Connect API credentials are missing. Cannot proceed with App Store deployment."
            exit 1
          fi
          
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "$APPLE_API_KEY_CONTENT" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
          echo "APPLE_API_KEY_PATH=~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8" >> $GITHUB_ENV
      
      - name: Install dependencies
        run: |
          cd ios-safari-extension
          xcodebuild -resolvePackageDependencies
      
      - name: Build for iOS Simulator (Testing)
        run: |
          cd ios-safari-extension
          xcodebuild clean build -scheme "ChronicleSync" -destination "platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=YES
      
      - name: Run unit tests
        continue-on-error: true
        id: unit_tests
        run: |
          cd ios-safari-extension
          mkdir -p test-reports
          
          # Run unit tests and capture output
          xcodebuild test -scheme "ChronicleSync" -destination "platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=YES -test-timeouts-enabled YES -maximum-test-execution-time-allowance 60 | tee test-reports/unit_test_results.txt || echo "Tests completed with Xcode error, but may have passed"
          
          # Check for failures in unit tests
          if grep -q -E "Test Case.*failed|.*[0-9]+ failures" test-reports/unit_test_results.txt; then
            echo "::error::Unit tests failed! See logs for details."
            echo "unit_tests_failed=true" >> $GITHUB_OUTPUT
          else
            echo "Unit tests completed without detected failures."
            echo "unit_tests_failed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run UI tests and capture screenshots
        continue-on-error: true
        id: ui_tests
        run: |
          cd ios-safari-extension
          mkdir -p ChronicleSync\ UITests/Attachments
          mkdir -p test-reports
          
          # Run UI tests - continue even if Xcode has internal errors
          xcodebuild test -scheme "ChronicleSync" -destination "platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest" -only-testing:ChronicleSync_UITests CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=YES -test-timeouts-enabled YES -maximum-test-execution-time-allowance 60 | tee test-reports/ui_test_results.txt || echo "UI tests completed with Xcode error, but may have passed"
          
          # Check for failures in UI tests
          if grep -q -E "Test Case.*failed|.*[0-9]+ failures" test-reports/ui_test_results.txt; then
            echo "::error::UI tests failed! See logs for details."
            echo "ui_tests_failed=true" >> $GITHUB_OUTPUT
          else
            echo "UI tests completed without detected failures."
            echo "ui_tests_failed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Archive screenshots
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: ios-safari-extension/ChronicleSync UITests/Attachments
      
      - name: Build and archive for App Store (Signed)
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd ios-safari-extension
          
          # Verify team ID is available
          if [ -z "$APPLE_TEAM_ID" ] || [ -z "$APPLE_APP_ID" ]; then
            echo "Error: Required Apple Team ID or App ID is missing. Cannot proceed with app archiving."
            exit 1
          fi
          
          # Update ExportOptions.plist with correct team ID
          sed -i '' "s/XXXXXXXXXX/$APPLE_TEAM_ID/g" ExportOptions.plist
          
          # Archive the app
          xcodebuild archive -scheme "ChronicleSync" -archivePath build/ChronicleSync.xcarchive -destination "generic/platform=iOS" DEVELOPMENT_TEAM="$APPLE_TEAM_ID" CODE_SIGN_IDENTITY="Apple Distribution" CODE_SIGN_STYLE="Manual" PROVISIONING_PROFILE_SPECIFIER="ChronicleSync Distribution"
          
          # Export IPA
          xcodebuild -exportArchive -archivePath build/ChronicleSync.xcarchive -exportPath build/IPA -exportOptionsPlist ExportOptions.plist
      
      - name: Upload IPA
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ChronicleSync-IPA
          path: ios-safari-extension/build/IPA
      
      - name: Generate test report
        if: always()
        continue-on-error: true
        id: test_report
        run: |
          cd ios-safari-extension
          mkdir -p test-reports
          
          # Generate test report - continue even if Xcode has internal errors
          # Capture test output to both the result bundle and a text file
          xcodebuild test -scheme "ChronicleSync" -destination "platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest" -resultBundlePath test-reports/TestResults.xcresult CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=YES -test-timeouts-enabled YES -maximum-test-execution-time-allowance 60 | tee test-reports/test_results.txt || echo "Test report generation completed with Xcode error"
          
          # First check for failures in the raw test output
          if grep -q "Test Case.*failed" test-reports/test_results.txt; then
            echo "::error::Found test failures in raw test output!"
            echo "tests_failed=true" >> $GITHUB_OUTPUT
          # Then check if the test report was generated
          elif [ -d "test-reports/TestResults.xcresult" ]; then
            echo "Test report generated successfully"
            
            # Verify test results
            xcrun xcresulttool get --path test-reports/TestResults.xcresult --format json > test-reports/test_results.json
            
            # Check for test failures and set output
            if grep -q "\"testStatus\" : \"Failure\"" test-reports/test_results.json; then
              echo "::error::Tests failed! See test report for details."
              echo "tests_failed=true" >> $GITHUB_OUTPUT
            else
              echo "All tests passed successfully!"
              echo "tests_failed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Creating placeholder test report"
            echo "Test results unavailable due to Xcode internal error" > test-reports/test_results.txt
            echo "::warning::Could not verify test results due to missing test report"
            echo "tests_failed=unknown" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ios-safari-extension/test-reports
          
      - name: Check test results
        if: always()
        run: |
          # Check if unit tests failed directly
          if [[ "${{ steps.unit_tests.outputs.unit_tests_failed }}" == "true" ]]; then
            echo "::error::Unit tests failed! See logs for details."
            exit 1
          fi
          
          # Check if UI tests failed
          if [[ "${{ steps.ui_tests.outputs.ui_tests_failed }}" == "true" ]]; then
            echo "::error::UI tests failed! See logs for details."
            exit 1
          fi
          
          # Force test failure if test report indicates failures
          if [[ "${{ steps.test_report.outputs.tests_failed }}" == "true" ]]; then
            echo "::error::Tests failed according to test report! See test report for details."
            exit 1
          # Force test failure if we couldn't verify results but want to be strict
          elif [[ "${{ steps.test_report.outputs.tests_failed }}" == "unknown" ]]; then
            echo "::warning::Could not verify test results from test report."
            
            # Check if we have any test output at all
            if [ -s "ios-safari-extension/test-reports/test_results.txt" ]; then
              # Look for any indication of test failures in the raw output
              if grep -q -E "Test Case.*failed|.*[0-9]+ failures" ios-safari-extension/test-reports/test_results.txt; then
                echo "::error::Found test failures in logs!"
                exit 1
              else
                echo "No test failures found in logs. Continuing."
              fi
            else
              echo "::warning::No test output available from test report. Cannot verify test status."
              # Uncomment to make the workflow fail when we can't verify tests at all
              # echo "::error::No test output available. Failing for safety."
              # exit 1
            fi
          else
            echo "All tests passed successfully!"
          fi
          
      - name: Upload to App Store Connect
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        env:
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          cd ios-safari-extension
          
          # Use xcrun altool to upload to App Store Connect
          xcrun altool --upload-app -f build/IPA/ChronicleSync.ipa --apiKey "$APPLE_API_KEY_ID" --apiIssuer "$APPLE_API_KEY_ISSUER_ID" --type ios
          echo "Successfully uploaded to App Store Connect"