name: iOS Tests

on:
  push:
    branches: [main]
    paths:
      - 'extension/**'
  pull_request:
    branches: [main]
    paths:
      - 'extension/**'
  workflow_dispatch:

jobs:
  build-and-test-ios:
    name: Build and Test iOS
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Install dependencies
        run: |
          cd extension
          npm ci
          npm run build
      
      - name: Build Safari extension
        run: |
          cd extension
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:extension
      
      - name: List available simulators
        run: |
          xcrun simctl list devices available

      - name: Setup environment
        run: |
          cd extension/ios-tests/ChronicleSync
          
          # Debug: List directory structure
          echo "=== Directory Structure ===" | tee -a setup_log.txt
          find . -type f | sort | tee -a setup_log.txt
          
          # Debug: Check Assets.xcassets
          echo "=== Assets.xcassets Content ===" | tee -a setup_log.txt
          find ./ChronicleSync/Assets.xcassets -type f | sort | tee -a setup_log.txt
          
          # Debug: Check Extension Resources
          echo "=== Extension Resources ===" | tee -a setup_log.txt
          find ./ChronicleSync\ Extension/Resources -type f | sort | tee -a setup_log.txt
          
          # Find available simulator
          echo "=== Available Simulators ===" | tee -a setup_log.txt
          xcrun simctl list devices available | tee -a setup_log.txt
          
          # Try to find iPhone 16 Pro simulator
          IPHONE_16_PRO=$(xcrun simctl list devices available -j | jq -r '.devices | to_entries[] | .value[] | select(.isAvailable == true and .name == "iPhone 16 Pro") | .udid' | head -n 1)
          
          if [ -n "$IPHONE_16_PRO" ]; then
            echo "Found iPhone 16 Pro simulator: $IPHONE_16_PRO" | tee -a setup_log.txt
            echo "SIMULATOR_ID=$IPHONE_16_PRO" >> $GITHUB_ENV
            echo "SIMULATOR_NAME=iPhone 16 Pro" >> $GITHUB_ENV
          else
            # Find any iPhone simulator
            IPHONE_SIM=$(xcrun simctl list devices available -j | jq -r '.devices | to_entries[] | .value[] | select(.isAvailable == true and (.name | contains("iPhone"))) | .udid' | head -n 1)
            
            if [ -n "$IPHONE_SIM" ]; then
              IPHONE_NAME=$(xcrun simctl list devices available -j | jq -r --arg UDID "$IPHONE_SIM" '.devices | to_entries[] | .value[] | select(.udid == $UDID) | .name' | head -n 1)
              echo "Found iPhone simulator: $IPHONE_SIM ($IPHONE_NAME)" | tee -a setup_log.txt
              echo "SIMULATOR_ID=$IPHONE_SIM" >> $GITHUB_ENV
              echo "SIMULATOR_NAME=$IPHONE_NAME" >> $GITHUB_ENV
            else
              # Find any simulator
              ANY_SIM=$(xcrun simctl list devices available -j | jq -r '.devices | to_entries[] | .value[] | select(.isAvailable == true) | .udid' | head -n 1)
              
              if [ -n "$ANY_SIM" ]; then
                ANY_NAME=$(xcrun simctl list devices available -j | jq -r --arg UDID "$ANY_SIM" '.devices | to_entries[] | .value[] | select(.udid == $UDID) | .name' | head -n 1)
                echo "Found simulator: $ANY_SIM ($ANY_NAME)" | tee -a setup_log.txt
                echo "SIMULATOR_ID=$ANY_SIM" >> $GITHUB_ENV
                echo "SIMULATOR_NAME=$ANY_NAME" >> $GITHUB_ENV
              else
                echo "No available simulator found, will use generic destination" | tee -a setup_log.txt
                echo "SIMULATOR_ID=generic" >> $GITHUB_ENV
                echo "SIMULATOR_NAME=generic" >> $GITHUB_ENV
              fi
            fi
          fi
      
      - name: Upload setup logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-setup-logs
          path: extension/ios-tests/ChronicleSync/setup_log.txt
          retention-days: 30
      
      - name: Build iOS app for simulator
        run: |
          cd extension/ios-tests/ChronicleSync
          
          echo "=== Building iOS app with simulator: $SIMULATOR_NAME ($SIMULATOR_ID) ===" | tee -a build_log.txt
          
          if [ "$SIMULATOR_ID" == "generic" ]; then
            xcodebuild build -scheme "ChronicleSync" -destination "platform=iOS Simulator,id=dvtdevice-DVTiOSDeviceSimulatorPlaceholder-iphonesimulator:placeholder" -verbose 2>&1 | tee -a build_log.txt
          else
            xcodebuild build -scheme "ChronicleSync" -destination "platform=iOS Simulator,id=$SIMULATOR_ID" -verbose 2>&1 | tee -a build_log.txt
          fi
          
          # Check if build was successful
          if [ $? -eq 0 ]; then
            echo "Build successful" | tee -a build_log.txt
            echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "Build failed" | tee -a build_log.txt
            echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi
      
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-build-logs
          path: extension/ios-tests/ChronicleSync/build_log.txt
          retention-days: 30
          
      - name: Create archive and IPA
        if: env.BUILD_SUCCESS == 'true'
        continue-on-error: true
        run: |
          cd extension/ios-tests/ChronicleSync
          
          echo "=== Creating archive for iOS app ===" | tee -a archive_log.txt
          echo "Note: This step may fail in CI environment due to code signing requirements" | tee -a archive_log.txt
          
          # Create a temporary export options plist
          cat > ExportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>FAKETEAMID</string>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOL
          
          # Create IPA directory to avoid artifact upload warning
          mkdir -p "./IPA"
          
          # Archive the app
          xcodebuild archive -scheme "ChronicleSync" -archivePath "./ChronicleSync.xcarchive" -allowProvisioningUpdates -verbose 2>&1 | tee -a archive_log.txt
          
          # Check if archive was successful
          if [ $? -eq 0 ]; then
            echo "Archive successful" | tee -a archive_log.txt
            
            # Export the archive as an IPA
            echo "=== Exporting archive as IPA ===" | tee -a archive_log.txt
            xcodebuild -exportArchive -archivePath "./ChronicleSync.xcarchive" -exportOptionsPlist ExportOptions.plist -exportPath "./IPA" -allowProvisioningUpdates -verbose 2>&1 | tee -a archive_log.txt
            
            # Check if export was successful
            if [ $? -eq 0 ]; then
              echo "Export successful" | tee -a archive_log.txt
              echo "ARCHIVE_SUCCESS=true" >> $GITHUB_ENV
            else
              echo "Export failed (expected in CI without proper signing)" | tee -a archive_log.txt
              echo "ARCHIVE_SUCCESS=false" >> $GITHUB_ENV
              # Create a placeholder file to avoid artifact upload warning
              echo "This is a placeholder file. IPA creation failed due to code signing requirements." > "./IPA/README.txt"
            fi
          else
            echo "Archive failed (expected in CI without proper signing)" | tee -a archive_log.txt
            echo "ARCHIVE_SUCCESS=false" >> $GITHUB_ENV
            # Create a placeholder file to avoid artifact upload warning
            echo "This is a placeholder file. Archive creation failed due to code signing requirements." > "./IPA/README.txt"
          fi
      
      - name: Upload archive logs
        uses: actions/upload-artifact@v4
        if: always() && env.BUILD_SUCCESS == 'true'
        with:
          name: ios-archive-logs
          path: extension/ios-tests/ChronicleSync/archive_log.txt
          retention-days: 30
          
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        if: env.BUILD_SUCCESS == 'true' && env.ARCHIVE_SUCCESS == 'true'
        with:
          name: ios-ipa
          path: extension/ios-tests/ChronicleSync/IPA
          retention-days: 30
      
      - name: Test iOS app
        if: env.BUILD_SUCCESS == 'true'
        continue-on-error: true
        id: test_step
        timeout-minutes: 10
        run: |
          cd extension/ios-tests/ChronicleSync
          
          echo "=== Testing iOS app with simulator: $SIMULATOR_NAME ($SIMULATOR_ID) ===" | tee -a test_log.txt
          echo "=== Test timeout set to 10 minutes ===" | tee -a test_log.txt
          
          # Create a variable to store the exit code
          TEST_EXIT_CODE=0
          
          # Run the test with a timeout
          if [ "$SIMULATOR_ID" == "generic" ]; then
            # Use a temporary file to capture the output while still showing it in real-time
            timeout 9m xcodebuild test -scheme "ChronicleSync" -destination "platform=iOS Simulator,id=dvtdevice-DVTiOSDeviceSimulatorPlaceholder-iphonesimulator:placeholder" -resultBundlePath TestResults.xcresult -verbose 2>&1 | tee -a test_log.txt
            TEST_EXIT_CODE=${PIPESTATUS[0]}
          else
            timeout 9m xcodebuild test -scheme "ChronicleSync" -destination "platform=iOS Simulator,id=$SIMULATOR_ID" -resultBundlePath TestResults.xcresult -verbose 2>&1 | tee -a test_log.txt
            TEST_EXIT_CODE=${PIPESTATUS[0]}
          fi
          
          # Check if tests were successful
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "Tests successful" | tee -a test_log.txt
            echo "TESTS_SUCCESS=true" >> $GITHUB_ENV
            echo "test_result=success" >> $GITHUB_OUTPUT
          elif [ $TEST_EXIT_CODE -eq 124 ]; then
            echo "Tests timed out after 9 minutes" | tee -a test_log.txt
            echo "TESTS_SUCCESS=false" >> $GITHUB_ENV
            echo "test_result=timeout" >> $GITHUB_OUTPUT
            
            # Create a minimal test result if it doesn't exist
            if [ ! -d "TestResults.xcresult" ]; then
              mkdir -p "TestResults.xcresult"
              echo "Test execution timed out after 9 minutes" > "TestResults.xcresult/README.txt"
            fi
            
            # Don't fail the workflow, but mark this step as timed out
            exit 0
          else
            echo "Tests failed with exit code $TEST_EXIT_CODE" | tee -a test_log.txt
            echo "TESTS_SUCCESS=false" >> $GITHUB_ENV
            echo "test_result=failure" >> $GITHUB_OUTPUT
            
            # Don't fail the workflow, but mark this step as failed
            # This allows subsequent steps to run while still indicating the test failure
            exit 0
          fi
      
      - name: Upload test logs
        uses: actions/upload-artifact@v4
        if: always() && env.BUILD_SUCCESS == 'true'
        with:
          name: ios-test-logs
          path: extension/ios-tests/ChronicleSync/test_log.txt
          retention-days: 30
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && env.BUILD_SUCCESS == 'true'
        with:
          name: ios-test-results
          path: extension/ios-tests/ChronicleSync/TestResults.xcresult
          retention-days: 30
      
      - name: Extract screenshots
        if: always() && env.BUILD_SUCCESS == 'true'
        continue-on-error: true
        run: |
          cd extension/ios-tests/ChronicleSync
          mkdir -p screenshots
          
          # Check if TestResults.xcresult exists
          if [ -d "TestResults.xcresult" ]; then
            xcrun xcresulttool get --legacy --path TestResults.xcresult --format json | grep -o '"filename" : ".*\.png"' | awk -F'"' '{print $4}' | xargs -I{} find TestResults.xcresult -name {} -exec cp {} screenshots/ \; || true
            
            # Check if any screenshots were found
            if [ "$(ls -A screenshots)" ]; then
              echo "Screenshots extracted successfully"
            else
              echo "No screenshots found in test results"
              # Create a placeholder file to avoid artifact upload warning
              echo "No screenshots were captured during the test run." > screenshots/README.txt
            fi
          else
            echo "TestResults.xcresult directory not found, skipping screenshot extraction"
            # Create a placeholder file to avoid artifact upload warning
            echo "TestResults.xcresult directory not found. No screenshots available." > screenshots/README.txt
          fi
      
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always() && env.BUILD_SUCCESS == 'true'
        with:
          name: ios-screenshots
          path: extension/ios-tests/ChronicleSync/screenshots
          retention-days: 30
          
      - name: Workflow Summary
        if: always()
        run: |
          echo "# iOS Build and Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build summary
          if [ "$BUILD_SUCCESS" == "true" ]; then
            echo "✅ **Build:** Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Archive summary
          if [ "$ARCHIVE_SUCCESS" == "true" ]; then
            echo "✅ **Archive:** Successful" >> $GITHUB_STEP_SUMMARY
          elif [ "$BUILD_SUCCESS" == "true" ]; then
            echo "⚠️ **Archive:** Failed (expected in CI without proper signing)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Archive:** Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test summary
          if [ "$TESTS_SUCCESS" == "true" ]; then
            echo "✅ **Tests:** Successful" >> $GITHUB_STEP_SUMMARY
          elif [ "$BUILD_SUCCESS" == "true" ]; then
            # Check if we have a test result from the test step
            if [ "${{ steps.test_step.outputs.test_result }}" == "timeout" ]; then
              echo "⏱️ **Tests:** Timed out (10 minute limit)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Tests:** Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Tests:** Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Setup logs" >> $GITHUB_STEP_SUMMARY
          echo "- Build logs" >> $GITHUB_STEP_SUMMARY
          
          if [ "$BUILD_SUCCESS" == "true" ]; then
            echo "- Archive logs" >> $GITHUB_STEP_SUMMARY
            echo "- IPA (placeholder if signing failed)" >> $GITHUB_STEP_SUMMARY
            echo "- Test logs" >> $GITHUB_STEP_SUMMARY
            echo "- Test results" >> $GITHUB_STEP_SUMMARY
            echo "- Screenshots (if any were captured)" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Check Test Status
        if: always() && env.BUILD_SUCCESS == 'true'
        run: |
          if [ "$TESTS_SUCCESS" != "true" ]; then
            echo "::error::Tests failed or timed out. Check the test logs for details."
            exit 1
          fi