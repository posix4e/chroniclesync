name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
      api_endpoint:
        description: 'API endpoint to test against'
        required: false
        type: string
        default: 'https://api-staging.chroniclesync.xyz'
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      current_version: ${{ steps.deploy-worker.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json
            worker/package-lock.json

      - name: Test Pages
        working-directory: pages
        env:
          API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz' }}
        run: |
          npm ci
          npm run lint
          npm run test
          npm run build

      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Package Extensions for All Platforms
        working-directory: extension
        run: |
          # Install zip utility
          sudo apt-get update && sudo apt-get install -y zip
          # Run build script with ESM support for all platforms
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:all

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: extension/chrome-extension.zip
          retention-days: 14
          
      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firefox-extension
          path: extension/firefox-extension.zip
          retention-days: 14
          
      - name: Upload Safari Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension
          path: extension/safari-extension.zip
          retention-days: 14

      - name: Test Extension
        working-directory: extension
        run: |
          npm run lint
          npm run test

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage

      - name: Install dependencies and run page tests
        working-directory: pages
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
        run: |
          npm ci
          npx playwright install --with-deps
          # Run tests in headless mode for all browsers if no specific browser is selected
          if [ -z "${{ github.event.inputs.browser }}" ]; then
            xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
              npx playwright test
          else
            xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
              npx playwright test --project=${{ github.event.inputs.browser }}
          fi
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-pages
          path: |
            pages/playwright-report/
            pages/test-results/
          retention-days: 30

      - name: Deploy Pages
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main --commit-dirty=true; else npm run deploy -- --branch ${{ github.head_ref }} --commit-dirty=true; fi

      - name: Deploy Worker
        id: deploy-worker
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CURRENT_VERSION=$(wrangler version show --json | jq -r '.version')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            npm run deploy -- --env production
          else
            npm run deploy -- --env staging
          fi

  playwright-tests:
    needs: build-and-test
    if: success() && (github.event_name != 'workflow_dispatch' || inputs.browser != '')
    strategy:
      fail-fast: false
      matrix:
        include:
          - browser: chromium
            os: ubuntu-latest
            artifact: chrome-extension
          - browser: firefox
            os: ubuntu-latest
            artifact: firefox-extension
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json

      - name: Download appropriate extension artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: extension

      - name: Install dependencies and run extension tests
        working-directory: extension
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: ${{ matrix.browser }}
        run: |
          npm ci
          npx playwright install --with-deps ${{ matrix.browser }}
          # Run e2e tests with frame buffer for the specific browser
          if [ "${{ matrix.browser }}" = "chromium" ]; then
            npm run test:e2e:chrome
          elif [ "${{ matrix.browser }}" = "firefox" ]; then
            npm run test:e2e:firefox
          elif [ "${{ matrix.browser }}" = "webkit" ]; then
            npm run test:e2e:webkit
          else
            npm run test:e2e
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-${{ matrix.browser }}
          path: |
            extension/playwright-report/
            extension/test-results/
            
  playwright-tests-webkit:
    needs: build-and-test
    if: success() && (github.event_name != 'workflow_dispatch' || inputs.browser == 'webkit' || inputs.browser == '')
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json

      - name: Download Safari extension artifact
        uses: actions/download-artifact@v4
        with:
          name: safari-extension
          path: extension

      - name: Install dependencies
        working-directory: extension
        run: |
          npm ci
          npx playwright install --with-deps webkit

      - name: Run Safari extension tests
        working-directory: extension
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: webkit
        run: |
          npm run test:e2e:webkit

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-webkit
          path: |
            extension/playwright-report/
            extension/test-results/
          retention-days: 30
          
  crowdin-push:
    name: Crowdin Push
    if: github.event_name != 'pull_request_target' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    needs:
    - build-and-test
    - playwright-tests
    - playwright-tests-webkit
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Login to Azure
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: "bitwarden-ci"
          secrets: "crowdin-api-token"

      - name: Upload Sources
        uses: crowdin/github-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_API_TOKEN: ${{ steps.retrieve-secrets.outputs.crowdin-api-token }}
          CROWDIN_PROJECT_ID: "268134"
        with:
          config: apps/browser/crowdin.yml
          crowdin_branch_name: main
          upload_sources: true
          upload_translations: false
          
  check-failures:
    name: Check for failures
    if: always()
    runs-on: ubuntu-22.04
    needs:
    - build-and-test
    - playwright-tests
    - playwright-tests-webkit
    - crowdin-push
    steps:
      - name: Check if any job failed
        if: |
          github.event_name != 'pull_request_target' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rc' || github.ref == 'refs/heads/hotfix-rc-browser') && 
          contains(needs.*.result, 'failure')
        run: exit 1
        
      - name: Login to Azure - Prod Subscription
        uses: Azure/login@v1
        if: failure()
        with:
          creds: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}
          
      - name: Retrieve secrets
        id: retrieve-secrets
        if: failure()
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: "bitwarden-ci"
          secrets: "devops-alerts-slack-webhook-url"
          
      - name: Notify Slack on failure
        uses: act10ns/slack@v2
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ steps.retrieve-secrets.outputs.devops-alerts-slack-webhook-url }}
        with:
          status: ${{ job.status }}
