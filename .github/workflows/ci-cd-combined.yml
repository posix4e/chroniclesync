name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - 'pages/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'pages/**'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test (leave empty to test all browsers)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - chromium
          - firefox
      api_endpoint:
        description: 'API endpoint to test against'
        required: false
        type: string
        default: 'https://api-staging.chroniclesync.xyz'
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: macos-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      current_version: ${{ steps.deploy-worker.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json
            worker/package-lock.json

      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Package Extensions
        working-directory: extension
        run: |
          # macOS already has zip utility installed
          # Run build script with ESM support
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:extension

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: extension/chrome-extension.zip
          retention-days: 14
          
      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firefox-extension
          path: extension/firefox-extension.xpi
          retention-days: 14
          
      - name: Test Extension
        working-directory: extension
        run: |
          npm run lint
          npm run test

      - name: Generate Safari IPA
        working-directory: extension
        run: |
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:safari-ipa
          
          # Verify the generated IPA file
          IPA_FILE=$(find ./ipa-output -name "*.ipa" | head -1)
          if [ -z "$IPA_FILE" ]; then
            echo "Error: No IPA file was generated"
            exit 1
          fi
          
          echo "Verifying generated IPA file: $IPA_FILE"
          mkdir -p ipa-verify
          unzip -q -o "$IPA_FILE" -d ipa-verify || {
            echo "Error: Failed to unzip IPA file. The file may be corrupted or not a valid IPA."
            ls -la "$IPA_FILE"
            file "$IPA_FILE"
            exit 1
          }
          
          # Check for Payload directory
          if [ ! -d "ipa-verify/Payload" ]; then
            echo "Error: Generated IPA file does not contain a Payload directory."
            ls -la ipa-verify
            exit 1
          fi
          
          # List the contents of the Payload directory
          echo "Generated IPA contents:"
          ls -la ipa-verify/Payload/
          
          echo "IPA verification passed."

      - name: Upload Safari IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension-ipa
          path: extension/ipa-output/*.ipa
          retention-days: 14

      - name: Check if worker files changed
        id: check-worker-changes
        run: |
          # Check if any worker files were changed
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^worker/"; then
            echo "worker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "worker_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # For pull requests, compare with the base branch
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -q "^worker/"; then
              echo "worker_changed=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Test Worker
        if: steps.check-worker-changes.outputs.worker_changed != 'false'
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage

      - name: Deploy Worker
        id: deploy-worker
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success() && steps.check-worker-changes.outputs.worker_changed != 'false'
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CURRENT_VERSION=$(wrangler version show --json | jq -r '.version')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            npm run deploy -- --env production
          else
            npm run deploy -- --env staging
          fi

  playwright-extension-tests:
    needs: build-and-test
    if: success()
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        # Future platforms can be added here (e.g., ios, android)
    runs-on: ubuntu-latest
    steps:
      # Skip this job if a specific browser is requested in workflow_dispatch and it's not this one
      - name: Check if this browser should be tested
        id: should_test
        run: |
          SHOULD_TEST="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.browser }}" != "" ]]; then
            if [[ "${{ matrix.browser }}" == "chrome" && "${{ github.event.inputs.browser }}" != "chromium" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "firefox" && "${{ github.event.inputs.browser }}" != "firefox" ]]; then
              SHOULD_TEST="false"
            fi
          fi
          echo "should_test=${SHOULD_TEST}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        if: steps.should_test.outputs.should_test == 'true'

      - uses: actions/setup-node@v4
        if: steps.should_test.outputs.should_test == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json

      - name: Download extension artifacts
        if: steps.should_test.outputs.should_test == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.browser == 'chrome' && 'chrome-extension' || 'firefox-extension' }}
          path: extension/dist

      - name: Install dependencies and run extension tests
        if: steps.should_test.outputs.should_test == 'true'
        working-directory: extension
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
        run: |
          npm ci
          # Install all browsers to ensure dependencies are available
          npx playwright install --with-deps
          # Ensure the specific browser is installed properly
          npx playwright install --with-deps ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
          # Run browser-specific e2e tests with frame buffer
          npm run test:e2e:${{ matrix.browser }}

      - name: Upload test results
        if: steps.should_test.outputs.should_test == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-${{ matrix.browser }}
          path: |
            extension/playwright-report/
            extension/test-results/${{ matrix.browser == 'chrome' && 'chrome' || 'firefox' }}/
          retention-days: 30
          
  test-safari-ipa:
    needs: build-and-test
    if: success()
    runs-on: macos-latest
    steps:
      # Skip this job if a specific browser is requested in workflow_dispatch and it's not safari
      - name: Check if this browser should be tested
        id: should_test
        run: |
          SHOULD_TEST="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.browser }}" != "" ]]; then
            if [[ "${{ github.event.inputs.browser }}" != "safari" ]]; then
              SHOULD_TEST="false"
            fi
          fi
          echo "should_test=${SHOULD_TEST}" >> $GITHUB_OUTPUT
          
      - uses: actions/checkout@v4
        if: steps.should_test.outputs.should_test == 'true'
      
      - uses: actions/setup-node@v4
        if: steps.should_test.outputs.should_test == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Download Safari IPA artifact
        if: steps.should_test.outputs.should_test == 'true'
        uses: actions/download-artifact@v4
        with:
          name: safari-extension-ipa
          path: ./safari-ipa
          
      - name: List downloaded IPA files
        if: steps.should_test.outputs.should_test == 'true'
        run: |
          ls -la ./safari-ipa
          
      - name: Create iOS simulator
        if: steps.should_test.outputs.should_test == 'true'
        id: create-simulator
        run: |
          # List available runtimes and devices for debugging
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes | grep iOS
          
          echo "Available device types:"
          xcrun simctl list devicetypes | grep iPhone
          
          # Use iOS 18.2 specifically (or fall back to latest if not available)
          if xcrun simctl list runtimes | grep -q "iOS 18.2"; then
            IOS_VERSION="com.apple.CoreSimulator.SimRuntime.iOS-18-2"
            echo "Using iOS version 18.2"
          else
            # Get the latest runtime identifier instead of just the version number
            IOS_VERSION=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}' | tr -d '()')
            echo "iOS 18.2 not available, using latest runtime: $IOS_VERSION"
          fi
          
          # Create a new simulator (use iPhone 16 if available, otherwise fall back to iPhone 14)
          SIMULATOR_NAME="ChronicleSync-Test-Simulator"
          if xcrun simctl list devicetypes | grep -q "iPhone 16"; then
            DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16"
          else
            DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-14"
            echo "iPhone 16 not available, using iPhone 14 instead"
          fi
          
          DEVICE_ID=$(xcrun simctl create "$SIMULATOR_NAME" "$DEVICE_TYPE" $IOS_VERSION)
          echo "Created simulator with ID: $DEVICE_ID using $DEVICE_TYPE with iOS $IOS_VERSION"
          echo "simulator_id=$DEVICE_ID" >> $GITHUB_OUTPUT
          
          # Boot the simulator
          xcrun simctl boot "$DEVICE_ID"
          echo "Booted simulator $DEVICE_ID"
          
      - name: Install and test IPA in simulator
        if: steps.should_test.outputs.should_test == 'true'
        run: |
          SIMULATOR_ID="${{ steps.create-simulator.outputs.simulator_id }}"
          IPA_PATH=$(find ./safari-ipa -name "*.ipa" | head -1)
          
          if [ -z "$IPA_PATH" ]; then
            echo "No IPA file found in the downloaded artifacts"
            exit 1
          fi
          
          echo "Found IPA file: $IPA_PATH"
          
          # Verify the IPA file
          echo "Verifying IPA file structure..."
          mkdir -p ipa-contents
          unzip -q -o "$IPA_PATH" -d ipa-contents || {
            echo "Error: Failed to unzip IPA file. The file may be corrupted or not a valid IPA."
            ls -la "$IPA_PATH"
            file "$IPA_PATH"
            exit 1
          }
          
          # Check for Payload directory and app bundle
          if [ ! -d "ipa-contents/Payload" ]; then
            echo "Error: IPA file does not contain a Payload directory."
            ls -la ipa-contents
            exit 1
          fi
          
          # List the contents of the Payload directory
          echo "IPA contents:"
          ls -la ipa-contents/Payload/
          
          # Check if there's at least one .app directory
          APP_COUNT=$(find ipa-contents/Payload -name "*.app" -type d | wc -l)
          if [ "$APP_COUNT" -eq 0 ]; then
            echo "Error: No .app bundle found in the IPA file."
            exit 1
          fi
          
          echo "IPA verification passed. Found $APP_COUNT app bundle(s)."
          
          # Wait for simulator to be ready
          echo "Waiting for simulator to be ready..."
          sleep 10
          
          # Install the IPA
          echo "Installing IPA to simulator..."
          xcrun simctl install "$SIMULATOR_ID" "$IPA_PATH"
          
          # Get the bundle ID from the IPA (if possible)
          BUNDLE_ID="com.chroniclesync.safari-extension"
          
          # Launch the app
          echo "Launching app with bundle ID: $BUNDLE_ID"
          xcrun simctl launch "$SIMULATOR_ID" "$BUNDLE_ID"
          
          # Wait for app to load
          echo "Waiting for app to load..."
          sleep 5
          
          # Take a screenshot of the app
          echo "Taking screenshot of the app..."
          xcrun simctl io "$SIMULATOR_ID" screenshot "app-screenshot-1.png"
          
          # Navigate through the app (if possible)
          echo "Attempting to navigate through the app..."
          sleep 2
          
          # Tap in the middle of the screen to interact with the app
          xcrun simctl io "$SIMULATOR_ID" input tap 200 400
          sleep 2
          xcrun simctl io "$SIMULATOR_ID" screenshot "app-screenshot-2.png"
          
          # Another interaction
          xcrun simctl io "$SIMULATOR_ID" input tap 200 600
          sleep 2
          xcrun simctl io "$SIMULATOR_ID" screenshot "app-screenshot-3.png"
          
          echo "Test completed successfully"
          
      - name: Upload simulator screenshots
        if: steps.should_test.outputs.should_test == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: safari-app-screenshots
          path: "*.png"
          retention-days: 14
