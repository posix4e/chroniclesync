name: iOS Build

on:
  push:
    branches: [main]
    paths-ignore:
      - 'pages/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'pages/**'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  ios-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json
            worker/package-lock.json
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Install dependencies
        working-directory: extension
        run: npm ci
      
      - name: Setup Apple Certificates
        env:
          APPLE_CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: |
          # Create keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD="temporary"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate
          echo "$APPLE_CERTIFICATE_CONTENT" | base64 --decode > certificate.p12
          security import certificate.p12 -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Set up provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$APPLE_PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      
      - name: Build Extension for Safari
        working-directory: extension
        run: |
          npm run build
          node ../scripts/build-safari-extension.cjs
      
      - name: Create Resources Directory
        run: |
          mkdir -p ios/ChronicleSync/Extension/Resources
          cp -r extension/dist/* ios/ChronicleSync/Extension/Resources/ || true
      
      - name: Build iOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd ios
          # For unsigned build (CI testing)
          xcodebuild -project ChronicleSync.xcodeproj -scheme ChronicleSync -configuration Debug -sdk iphoneos CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
      
      - name: Create IPA
        run: |
          mkdir -p ios/build/Payload
          cp -r ios/build/Debug-iphoneos/ChronicleSync.app ios/build/Payload/
          cd ios/build
          zip -r ChronicleSync.ipa Payload
      
      - name: Take Screenshots
        run: |
          mkdir -p screenshots
          echo "Taking screenshots of the app would normally be done with Fastlane or XCUITest"
          echo "This is a placeholder for the screenshot process"
          echo "Screenshot 1: App Home Screen" > screenshots/screenshot1.txt
          echo "Screenshot 2: Safari Extension Settings" > screenshots/screenshot2.txt
      
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chroniclesync-ios
          path: ios/build/ChronicleSync.ipa
          retention-days: 14
      
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: screenshots
          retention-days: 14