const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/SummarizationService-B7ISiXKw.js","assets/_commonjsHelpers-C932wzq6.js"])))=>i.map(i=>d[i]);
var u=Object.defineProperty;var d=(l,t,r)=>t in l?u(l,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):l[t]=r;var c=(l,t,r)=>d(l,typeof t!="symbol"?t+"":t,r);import{S as f,_ as S}from"./assets/Settings-BBcd2W0-.js";import{H as w}from"./assets/HistoryStore-OnFK6_AC.js";class p{constructor(t){c(this,"settings");c(this,"deviceInfo");this.settings=t,this.deviceInfo=this.getDeviceInfo()}getDeviceInfo(){var e,o,n,a;const t=navigator.platform,r=navigator.userAgent;let s="Unknown",i="Unknown";return r.includes("Chrome")?(s="Chrome",i=((e=r.match(/Chrome\/([0-9.]+)/))==null?void 0:e[1])||"Unknown"):r.includes("Firefox")?(s="Firefox",i=((o=r.match(/Firefox\/([0-9.]+)/))==null?void 0:o[1])||"Unknown"):r.includes("Safari")?(s="Safari",i=((n=r.match(/Version\/([0-9.]+)/))==null?void 0:n[1])||"Unknown"):r.includes("Edge")&&(s="Edge",i=((a=r.match(/Edge\/([0-9.]+)/))==null?void 0:a[1])||"Unknown"),{platform:t,browserName:s,browserVersion:i,userAgent:r}}async syncHistory(t){const r=this.settings.getApiUrl(),s=await chrome.storage.sync.get(["clientId"]).then(n=>n.clientId);if(!s)throw new Error("Client ID not found");const i={history:t,deviceInfo:this.deviceInfo};console.log("Syncing history with payload:",i);const e=await fetch(`${r}/history/sync?clientId=${s}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(!e.ok){const n=await e.text();throw console.error("Sync failed:",n),new Error(`Sync failed: ${n}`)}const o=await e.json();console.log("Sync successful:",o)}async getHistory(t=1,r=50){const s=this.settings.getApiUrl(),i=await chrome.storage.sync.get(["clientId"]).then(n=>n.clientId);if(!i)throw new Error("Client ID not found");const e=await fetch(`${s}/history?clientId=${i}&page=${t}&pageSize=${r}`,{headers:{"Content-Type":"application/json"}});if(!e.ok){const n=await e.text();throw console.error("Failed to get history:",n),new Error(`Failed to get history: ${n}`)}return(await e.json()).history||[]}}class v{constructor(t){c(this,"settings");c(this,"store");c(this,"syncService");c(this,"syncInterval",null);c(this,"SYNC_INTERVAL_MS",5*60*1e3);this.settings=t,this.store=new w,this.syncService=new p(t)}async init(){await this.store.init(),this.setupHistoryListener()}async getSystemInfo(){const t=navigator.platform,r=navigator.userAgent,s=r.includes("Chrome")?"Chrome":r.includes("Firefox")?"Firefox":r.includes("Safari")?"Safari":"Unknown",i=(r.match(/Chrome\/([0-9.]+)/)||["","unknown"])[1];return{deviceId:await this.getDeviceId(),platform:t,userAgent:r,browserName:s,browserVersion:i}}async getDeviceId(){const t=await chrome.storage.local.get(["deviceId"]);if(t.deviceId)return t.deviceId;const r="device_"+Math.random().toString(36).substring(2);return await chrome.storage.local.set({deviceId:r}),r}setupHistoryListener(){console.log("Setting up history listener..."),this.loadInitialHistory(),chrome.history.onVisited.addListener(async t=>{var r;if(console.log("New history entry:",t),t.url)try{const s=await chrome.history.getVisits({url:t.url}),i=s[s.length-1];if(i){const e=await this.getSystemInfo();await this.store.addEntry({visitId:`${i.visitId}`,url:t.url,title:t.title||"",visitTime:t.lastVisitTime||Date.now(),referringVisitId:((r=i.referringVisitId)==null?void 0:r.toString())||"0",transition:i.transition,...e}),console.log("History entry stored successfully")}}catch(s){console.error("Error storing history entry:",s)}})}async loadInitialHistory(){var t,r;console.log("Loading initial history...");try{const s=((t=this.settings.config)==null?void 0:t.expirationDays)||7,i=await chrome.history.search({text:"",maxResults:100,startTime:Date.now()-s*24*60*60*1e3});console.log("Found initial history items:",i.length);const e=await this.getSystemInfo();for(const o of i)if(o.url){const n=await chrome.history.getVisits({url:o.url});for(const a of n)await this.store.addEntry({visitId:`${a.visitId}`,url:o.url,title:o.title||"",visitTime:a.visitTime||Date.now(),referringVisitId:((r=a.referringVisitId)==null?void 0:r.toString())||"0",transition:a.transition,...e})}console.log("Initial history loaded successfully")}catch(s){console.error("Error loading initial history:",s)}}async startSync(){this.syncInterval||(await this.syncPendingEntries(),this.syncInterval=window.setInterval(()=>{this.syncPendingEntries().catch(t=>{console.error("Error during sync:",t)})},this.SYNC_INTERVAL_MS))}stopSync(){this.syncInterval&&(window.clearInterval(this.syncInterval),this.syncInterval=null)}async syncPendingEntries(){var e;const t=((e=this.settings.config)==null?void 0:e.expirationDays)||7,r=Date.now()-t*24*60*60*1e3,i=(await this.store.getUnsyncedEntries()).filter(o=>o.visitTime>=r);if(i.length!==0)try{const o=i.map(n=>({visitId:n.visitId,url:n.url,title:n.title,visitTime:n.visitTime,platform:n.platform,browserName:n.browserName}));await this.syncService.syncHistory(o),await Promise.all(i.map(n=>this.store.markAsSynced(n.url))),console.log("Successfully synced entries:",i.length)}catch(o){throw console.error("Error syncing history:",o),o}}async getHistory(){var i;const t=((i=this.settings.config)==null?void 0:i.expirationDays)||7,r=Date.now()-t*24*60*60*1e3;return(await this.store.getEntries()).filter(e=>e.visitTime>=r)}}class I{constructor(){c(this,"settings");c(this,"historySync");c(this,"pageSummaries",new Map);this.settings=new f,this.historySync=new v(this.settings)}async init(){await this.settings.init(),await this.historySync.init(),await this.historySync.startSync(),await this.loadSavedSummaries(),this.setupMessageListeners(),this.setupContentScriptInjection()}async loadSavedSummaries(){try{const t=await chrome.storage.local.get(["pageSummaries"]);if(t.pageSummaries){const r=JSON.parse(t.pageSummaries);for(const[s,i]of Object.entries(r))this.pageSummaries.set(s,i);console.log(`Loaded ${this.pageSummaries.size} saved summaries`)}}catch(t){console.error("Error loading saved summaries:",t)}}async saveSummaries(){try{const t={};this.pageSummaries.forEach((r,s)=>{t[s]=r}),await chrome.storage.local.set({pageSummaries:JSON.stringify(t)})}catch(t){console.error("Error saving summaries:",t)}}setupContentScriptInjection(){console.log("Content script will be injected via manifest.json")}setupMessageListeners(){chrome.runtime.onMessage.addListener((t,r,s)=>{console.log("Received message:",t);const i=e=>{const o=e instanceof Error?e.message:"Unknown error";console.error("Error handling message:",e),s({error:o})};if(t.type==="stopSync"){try{this.historySync.stopSync(),s({success:!0})}catch(e){i(e)}return!1}if(t.type==="summarizeContent"){try{const{url:e,title:o,content:n,timestamp:a}=t.data;console.log("Received content for summarization from:",e),console.log("Content length:",n.length);const h=setTimeout(()=>{console.error("Summarization timed out after 25 seconds"),s({error:"Summarization timed out after 25 seconds. The model may still be loading.",success:!1})},25e3);S(()=>import("./assets/SummarizationService-B7ISiXKw.js"),__vite__mapDeps([0,1])).then(async({SummarizationService:y})=>{try{console.log("Summarization service imported, starting summarization...");const m=y.getInstance();await m.init();const g=await m.summarize(n);console.log("Summarization completed for:",e),console.log("Summary:",g),this.pageSummaries.set(e,{url:e,title:o,summary:g,timestamp:a}),await this.saveSummaries(),clearTimeout(h),s({success:!0,summary:g})}catch(m){clearTimeout(h),console.error("Error during summarization:",m);const g=m instanceof Error?m.message:"Unknown error during summarization";s({error:g,success:!1})}}).catch(y=>{clearTimeout(h),console.error("Error importing summarization service:",y);const m=y instanceof Error?y.message:"Failed to load summarization service";s({error:m,success:!1})})}catch(e){console.error("Error processing summarization request:",e);const o=e instanceof Error?e.message:"Unknown error processing request";s({error:o,success:!1})}return!0}if(t.type==="storeSummary"){try{const{url:e,title:o,summary:n,timestamp:a}=t.data;console.log("Storing summary for:",e),console.log("Summary:",n),this.pageSummaries.set(e,{url:e,title:o,summary:n,timestamp:a}),this.saveSummaries(),s({success:!0})}catch(e){i(e)}return!1}if(t.type==="getSummary"){try{const{url:e}=t,o=this.pageSummaries.get(e);console.log("Retrieved summary for:",e,o),s({summary:o})}catch(e){i(e)}return!1}if(t.type==="getAllSummaries"){try{const e=Array.from(this.pageSummaries.values());console.log("Sending all summaries:",e.length),s({summaries:e})}catch(e){i(e)}return!1}return t.type==="getHistory"||t.type==="startSync"?((async()=>{try{if(t.type==="getHistory"){const o=await this.historySync.getHistory();console.log("Sending history:",o),s(o||[])}else t.type==="startSync"&&(await this.historySync.startSync(),s({success:!0}))}catch(o){i(o)}})(),!0):(console.warn("Unknown message type:",t.type),s({error:`Unknown message type: ${t.type}`}),!1)})}}console.log("Starting background service...");const E=new I;E.init().then(()=>{console.log("Background service initialized successfully")}).catch(l=>{console.error("Error initializing background service:",l)});
