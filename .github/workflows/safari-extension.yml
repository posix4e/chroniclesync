name: Safari Extension CI

on:
  push:
    branches: [main, safari-extension-support]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            extension/package-lock.json

      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Build Safari Extension
        run: |
          cd safari-extension
          ./build-safari-extension.sh

      - name: Build Xcode Project
        run: |
          cd safari-extension
          xcodebuild -project ChronicleSync.xcodeproj -scheme "ChronicleSync" -configuration Debug -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 14,OS=latest" build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

      - name: Run Basic Tests
        run: |
          cd safari-extension
          xcodebuild -project ChronicleSync.xcodeproj -scheme "ChronicleSync" -configuration Debug -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 14,OS=latest" -testPlan ChronicleSync test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

      - name: Upload Safari Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension
          path: safari-extension/ChronicleSync.xcodeproj
          retention-days: 14
          
  deploy-testflight:
    name: Deploy to TestFlight
    needs: build-and-test
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/safari-extension-support'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            extension/package-lock.json

      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Build Safari Extension
        run: |
          cd safari-extension
          ./build-safari-extension.sh
          
      - name: Install Apple Certificate
        env:
          APPLE_CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$APPLE_CERTIFICATE_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_CERTIFICATE_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          echo $APPLE_CERTIFICATE_CONTENT | base64 --decode > $RUNNER_TEMP/certificate.p12
          security import $RUNNER_TEMP/certificate.p12 -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Clean up
          rm $RUNNER_TEMP/certificate.p12
      
      - name: Install Provisioning Profile
        env:
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo $APPLE_PROVISIONING_PROFILE | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      
      - name: Build and Archive App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd safari-extension
          xcodebuild -project ChronicleSync.xcodeproj -scheme "ChronicleSync" -configuration Release -sdk iphoneos -archivePath $RUNNER_TEMP/ChronicleSync.xcarchive archive DEVELOPMENT_TEAM=$APPLE_TEAM_ID CODE_SIGN_STYLE=Manual
      
      - name: Export IPA
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd safari-extension
          cat > exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.chroniclesync.app</key>
              <string>ChronicleSync Distribution</string>
            </dict>
          </dict>
          </plist>
          EOL
          
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/ChronicleSync.xcarchive -exportPath $RUNNER_TEMP/export -exportOptionsPlist exportOptions.plist
      
      - name: Upload to TestFlight
        env:
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Save API key to file
          echo "$APPLE_API_KEY_CONTENT" | base64 --decode > $RUNNER_TEMP/api_key.p8
          
          # Upload to TestFlight using altool
          xcrun altool --upload-app -f $RUNNER_TEMP/export/ChronicleSync.ipa --apiKey $APPLE_API_KEY_ID --apiIssuer $APPLE_API_KEY_ISSUER_ID --apiKeyPath $RUNNER_TEMP/api_key.p8
          
          # Clean up
          rm $RUNNER_TEMP/api_key.p8