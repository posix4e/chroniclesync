name: Build Unsigned IPA for Simulator

on:
  push:
    branches: [ main, ios-* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    name: Build Unsigned IPA with Screenshots
    runs-on: macos-latest  # Use the latest macOS runner
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: List Available Simulators
        run: xcrun simctl list devices available
      
      - name: Install Dependencies
        run: |
          cd extension/ChronicleSync
          # Add any dependency installation steps here if needed
          # For example: pod install, etc.
      
      - name: Build for Simulator
        run: |
          cd extension/ChronicleSync
          # Build for iPhone simulator
          xcodebuild \
            -scheme "ChronicleSync (iOS)" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=iPhone 16,OS=18.2" \
            -configuration Debug \
            -derivedDataPath build \
            clean build
      
      - name: Boot Simulator and Install App
        run: |
          # Start the simulator - specifically looking for iPhone 16 with OS 18.2
          SIMULATOR_UDID=$(xcrun simctl list devices available | grep "iPhone 16" | grep "18.2" | grep -v "Pro" | grep -v "Plus" | grep -v "unavailable" | head -1 | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
          echo "Using simulator with UDID: $SIMULATOR_UDID"
          
          # Check if we found a valid simulator
          if [ -z "$SIMULATOR_UDID" ]; then
            echo "Error: Could not find iPhone 16 with OS 18.2 simulator. Listing available simulators:"
            xcrun simctl list devices available
            exit 1
          fi
          
          # Boot the simulator
          xcrun simctl boot "$SIMULATOR_UDID"
          
          # Wait for simulator to boot
          sleep 20
          
          # Install the app
          APP_PATH="extension/ChronicleSync/build/Build/Products/Debug-iphonesimulator/ChronicleSync.app"
          xcrun simctl install "$SIMULATOR_UDID" "$APP_PATH"
          
          # Verify installation
          echo "Verifying app installation..."
          xcrun simctl listapps "$SIMULATOR_UDID" | grep -q ChronicleSync || echo "Warning: App may not have been installed correctly"
          
          # Create screenshots directory
          mkdir -p screenshots
          
          # Launch the app
          BUNDLE_ID=$(defaults read "$APP_PATH/Info" CFBundleIdentifier)
          echo "App bundle identifier: $BUNDLE_ID"
          xcrun simctl launch "$SIMULATOR_UDID" "$BUNDLE_ID" &
          
          # Wait for app to launch
          sleep 5
          
          # Take screenshot of home screen
          xcrun simctl io "$SIMULATOR_UDID" screenshot "screenshots/home_screen.png"
          
          # Navigate to Safari and enable extension (this is more complex and requires UI automation)
          # For now, we'll just open Safari to demonstrate
          xcrun simctl launch "$SIMULATOR_UDID" "com.apple.mobilesafari"
          sleep 3
          
          # Take screenshot of Safari
          xcrun simctl io "$SIMULATOR_UDID" screenshot "screenshots/safari.png"
          
          # Open Settings app
          xcrun simctl launch "$SIMULATOR_UDID" "com.apple.Preferences"
          sleep 3
          
          # Take screenshot of Settings
          xcrun simctl io "$SIMULATOR_UDID" screenshot "screenshots/settings.png"
          
          # Create a README for the screenshots
          cat > screenshots/README.md << EOF
          # ChronicleSync Simulator Screenshots
          
          These screenshots were automatically generated during the build process.
          
          ## Home Screen
          ![Home Screen](home_screen.png)
          
          ## Safari
          ![Safari](safari.png)
          
          ## Settings
          ![Settings](settings.png)
          
          *Note: These are basic screenshots. The extension may need to be manually enabled in Settings > Safari > Extensions.*
          EOF
      
      - name: Create Unsigned IPA
        run: |
          cd extension/ChronicleSync
          # Create a directory for the app
          mkdir -p Payload
          
          # Find and copy the app bundle
          cp -r build/Build/Products/Debug-iphonesimulator/ChronicleSync.app Payload/
          
          # Create the IPA (which is just a zip file with a specific structure)
          zip -r ChronicleSync-Simulator.ipa Payload
          
          # Move to a known location
          mkdir -p artifacts
          mv ChronicleSync-Simulator.ipa artifacts/
      
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ChronicleSync-Simulator
          path: extension/ChronicleSync/artifacts/ChronicleSync-Simulator.ipa
          retention-days: 7
      
      - name: Upload App Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ChronicleSync-App-Bundle
          path: extension/ChronicleSync/Payload/ChronicleSync.app
          retention-days: 7
          
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        with:
          name: ChronicleSync-Screenshots
          path: screenshots/
          retention-days: 7
