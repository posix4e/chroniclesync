name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test (leave empty to test all browsers)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - chromium
          - firefox
          - safari
      api_endpoint:
        description: 'API endpoint to test against'
        required: false
        type: string
        default: 'https://api-staging.chroniclesync.xyz'
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      current_version: ${{ steps.deploy-worker.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json
            worker/package-lock.json

      - name: Check if Pages files changed
        id: check_pages_changes
        run: |
          # Check if any files in the pages directory or the workflow file itself changed
          PAGES_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^pages/|^\.github/workflows/ci-cd-combined\.yml$' || echo "")
          if [ -n "$PAGES_CHANGED" ]; then
            echo "pages_changed=true" >> $GITHUB_OUTPUT
          else
            echo "pages_changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Test Pages
        if: steps.check_pages_changes.outputs.pages_changed == 'true'
        working-directory: pages
        env:
          API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz' }}
        run: |
          npm ci
          npm run lint
          npm run test
          npm run build

      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Package Extensions
        working-directory: extension
        run: |
          # Install zip utility
          sudo apt-get update && sudo apt-get install -y zip
          # Run build script with ESM support
          NODE_OPTIONS="--experimental-vm-modules --no-warnings" npm run build:extension

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: extension/chrome-extension.zip
          retention-days: 14
          
      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: firefox-extension
          path: extension/firefox-extension.xpi
          retention-days: 14

      - name: Test Extension
        working-directory: extension
        run: |
          npm run lint
          npm run test

      - name: Check if Worker files changed
        id: check_worker_test_changes
        run: |
          # Check if any files in the worker directory or the workflow file itself changed
          WORKER_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^worker/|^\.github/workflows/ci-cd-combined\.yml$' || echo "")
          if [ -n "$WORKER_CHANGED" ]; then
            echo "worker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "worker_changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Test Worker
        if: steps.check_worker_test_changes.outputs.worker_changed == 'true'
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage

      - name: Install dependencies and run page tests
        if: steps.check_pages_changes.outputs.pages_changed == 'true'
        working-directory: pages
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
        run: |
          npm ci
          npx playwright install --with-deps
          # Run tests in headless mode for all browsers if no specific browser is selected
          if [ -z "${{ github.event.inputs.browser }}" ]; then
            xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
              npx playwright test
          else
            xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
              npx playwright test --project=${{ github.event.inputs.browser }}
          fi
      - name: Upload test results
        if: steps.check_pages_changes.outputs.pages_changed == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-pages
          path: |
            pages/playwright-report/
            pages/test-results/
          retention-days: 30

      - name: Deploy Pages
        if: steps.check_pages_changes.outputs.pages_changed == 'true' && (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main --commit-dirty=true; else npm run deploy -- --branch ${{ github.head_ref }} --commit-dirty=true; fi

      - name: Check if Worker files changed
        id: check_worker_changes
        run: |
          # Check if any files in the worker directory or the workflow file itself changed
          WORKER_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^worker/|^\.github/workflows/ci-cd-combined\.yml$' || echo "")
          if [ -n "$WORKER_CHANGED" ]; then
            echo "worker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "worker_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Worker
        id: deploy-worker
        if: steps.check_worker_changes.outputs.worker_changed == 'true' && (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main') && success()
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CURRENT_VERSION=$(wrangler version show --json | jq -r '.version')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            npm run deploy -- --env production
          else
            npm run deploy -- --env staging
          fi

  playwright-extension-tests:
    needs: build-and-test
    if: success()
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, safari]
        # Safari tests run on macOS, others on Ubuntu
        include:
          - browser: safari
            os: macos-latest
          - browser: chrome
            os: ubuntu-latest
          - browser: firefox
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Skip this job if a specific browser is requested in workflow_dispatch and it's not this one
      - name: Check if this browser should be tested
        id: should_test
        run: |
          SHOULD_TEST="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.browser }}" != "" ]]; then
            if [[ "${{ matrix.browser }}" == "chrome" && "${{ github.event.inputs.browser }}" != "chromium" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "firefox" && "${{ github.event.inputs.browser }}" != "firefox" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "safari" && "${{ github.event.inputs.browser }}" != "safari" ]]; then
              SHOULD_TEST="false"
            fi
          fi
          echo "should_test=${SHOULD_TEST}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        if: steps.should_test.outputs.should_test == 'true'

      - uses: actions/setup-node@v4
        if: steps.should_test.outputs.should_test == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            extension/package-lock.json

      - name: Download extension artifacts
        if: steps.should_test.outputs.should_test == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.browser == 'chrome' && 'chrome-extension' || 'firefox-extension' }}
          path: extension/dist

      - name: Install dependencies and run extension tests
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser != 'safari'
        working-directory: extension
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
        run: |
          npm ci
          # Install all browsers to ensure dependencies are available
          npx playwright install --with-deps
          # Ensure the specific browser is installed properly
          npx playwright install --with-deps ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
          # Run browser-specific e2e tests with frame buffer
          npm run test:e2e:${{ matrix.browser }}
          
      - name: Build and Test Safari Extension
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari'
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
        run: |
          cd safari-extension
          ./build-safari-extension.sh
          xcodebuild -project ChronicleSync.xcodeproj -scheme "ChronicleSync" -configuration Debug -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 14,OS=latest" -testPlan ChronicleSync test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

      - name: Upload test results
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser != 'safari' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-${{ matrix.browser }}
          path: |
            extension/playwright-report/
            extension/test-results/${{ matrix.browser == 'chrome' && 'chrome' || 'firefox' }}/
          retention-days: 30
          
      - name: Upload Safari test results
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari' && always()
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension-test-results
          path: |
            safari-extension/ChronicleSync.xcodeproj
            safari-extension/build/
          retention-days: 30
          
  deploy-to-testflight:
    name: Deploy Safari Extension to TestFlight
    needs: [build-and-test, playwright-extension-tests]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            extension/package-lock.json

      - name: Build Extension
        working-directory: extension
        run: |
          npm ci
          npm run build

      - name: Build Safari Extension
        run: |
          cd safari-extension
          ./build-safari-extension.sh
          
      - name: Install Apple Certificate
        env:
          APPLE_CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$APPLE_CERTIFICATE_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_CERTIFICATE_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          echo $APPLE_CERTIFICATE_CONTENT | base64 --decode > $RUNNER_TEMP/certificate.p12
          security import $RUNNER_TEMP/certificate.p12 -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Clean up
          rm $RUNNER_TEMP/certificate.p12
      
      - name: Install Provisioning Profile
        env:
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo $APPLE_PROVISIONING_PROFILE | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      
      - name: Build and Archive App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd safari-extension
          xcodebuild -project ChronicleSync.xcodeproj -scheme "ChronicleSync" -configuration Release -sdk iphoneos -archivePath $RUNNER_TEMP/ChronicleSync.xcarchive archive DEVELOPMENT_TEAM=$APPLE_TEAM_ID CODE_SIGN_STYLE=Manual
      
      - name: Export IPA
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd safari-extension
          cat > exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.chroniclesync.app</key>
              <string>ChronicleSync Distribution</string>
            </dict>
          </dict>
          </plist>
          EOL
          
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/ChronicleSync.xcarchive -exportPath $RUNNER_TEMP/export -exportOptionsPlist exportOptions.plist
      
      - name: Upload to TestFlight
        env:
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Save API key to file
          echo "$APPLE_API_KEY_CONTENT" | base64 --decode > $RUNNER_TEMP/api_key.p8
          
          # Upload to TestFlight using altool
          xcrun altool --upload-app -f $RUNNER_TEMP/export/ChronicleSync.ipa --apiKey $APPLE_API_KEY_ID --apiIssuer $APPLE_API_KEY_ISSUER_ID --apiKeyPath $RUNNER_TEMP/api_key.p8
          
          # Clean up
          rm $RUNNER_TEMP/api_key.p8
