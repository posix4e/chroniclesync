name: Safari CI

on:
  push:
    branches: [ main, ios-* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering
    inputs:
      run_uitests:
        description: 'Run UI tests'
        required: false
        type: boolean
        default: true
      skip_screenshots:
        description: 'Skip taking screenshots'
        required: false
        type: boolean
        default: false

jobs:
  safari-ci:
    name: Build and Test Safari Extension
    runs-on: macos-latest  # Use the latest macOS runner
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Install Node.js Dependencies
        run: |
          cd extension
          npm ci
      
      - name: Setup Simulator
        id: simulator
        run: |
          # Find available iPhone simulator
          echo "Finding available iPhone simulator..."
          AVAILABLE_SIMULATOR=$(xcrun simctl list devices available | grep "iPhone" | grep -v "unavailable" | head -1)
          SIMULATOR_NAME=$(echo "$AVAILABLE_SIMULATOR" | sed -E 's/.*iPhone[^(]*\(.*\).*/iPhone/' | xargs)
          SIMULATOR_UDID=$(echo "$AVAILABLE_SIMULATOR" | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
          SIMULATOR_OS=$(echo "$AVAILABLE_SIMULATOR" | sed -E 's/.*iOS ([0-9.]+).*/\1/' | xargs)
          
          echo "Using simulator: $SIMULATOR_NAME with iOS $SIMULATOR_OS (UDID: $SIMULATOR_UDID)"
          
          # Export variables for later steps
          echo "simulator_name=$SIMULATOR_NAME" >> $GITHUB_OUTPUT
          echo "simulator_udid=$SIMULATOR_UDID" >> $GITHUB_OUTPUT
          echo "simulator_os=$SIMULATOR_OS" >> $GITHUB_OUTPUT
          
          # Boot the simulator
          echo "Booting simulator..."
          xcrun simctl boot "$SIMULATOR_UDID"
          sleep 5
      
      - name: Build Safari Extension
        run: |
          cd extension/ChronicleSync
          
          # Build for iPhone simulator
          xcodebuild \
            -scheme "ChronicleSync (iOS)" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.simulator_udid }}" \
            -configuration Debug \
            -derivedDataPath build \
            clean build
      
      - name: Install App and Take Screenshots
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_screenshots != 'true'
        run: |
          cd extension/ChronicleSync
          
          # Find the app bundle
          APP_PATH=$(find build -name "*.app" -type d | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "Error: Could not find app bundle."
            exit 1
          fi
          
          echo "Found app bundle at: $APP_PATH"
          
          # Get bundle identifier
          BUNDLE_ID=$(plutil -p "$APP_PATH/Info.plist" 2>/dev/null | grep CFBundleIdentifier | awk -F'"' '{print $4}' || echo "xyz.chroniclesync.ChronicleSync")
          echo "Bundle identifier: $BUNDLE_ID"
          
          # Install the app
          xcrun simctl install "${{ steps.simulator.outputs.simulator_udid }}" "$APP_PATH"
          
          # Create screenshots directory
          mkdir -p screenshots
          
          # Launch the app and take screenshots
          xcrun simctl launch "${{ steps.simulator.outputs.simulator_udid }}" "$BUNDLE_ID" || echo "Warning: Could not launch app"
          sleep 3
          xcrun simctl io "${{ steps.simulator.outputs.simulator_udid }}" screenshot "screenshots/app_screen.png" || echo "Warning: Could not take app screenshot"
          
          # Take screenshots of Safari and Settings
          xcrun simctl launch "${{ steps.simulator.outputs.simulator_udid }}" "com.apple.mobilesafari"
          sleep 2
          xcrun simctl io "${{ steps.simulator.outputs.simulator_udid }}" screenshot "screenshots/safari.png"
          
          xcrun simctl launch "${{ steps.simulator.outputs.simulator_udid }}" "com.apple.Preferences"
          sleep 2
          xcrun simctl io "${{ steps.simulator.outputs.simulator_udid }}" screenshot "screenshots/settings.png"
          
          # Create a README for the screenshots
          cat > screenshots/README.md << EOF
          # ChronicleSync Simulator Screenshots
          
          These screenshots were automatically generated during the build process.
          
          ## App
          ![App](app_screen.png)
          
          ## Safari
          ![Safari](safari.png)
          
          ## Settings
          ![Settings](settings.png)
          
          *Note: These are basic screenshots. The extension may need to be manually enabled in Settings > Safari > Extensions.*
          EOF
      
      - name: Prepare UI Tests
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_uitests == 'true'
        run: |
          cd extension/ChronicleSync
          
          # Start backend server
          cd ../
          npm run start-test-server &
          sleep 5
          
          cd ../
      
      - name: Run UI Tests
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_uitests == 'true'
        run: |
          cd extension/ChronicleSync
          
          # Create a simple test script that verifies the app builds and launches
          echo "Creating test script..."
          
          cat > test_safari_extension.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "=== Testing Safari Extension ==="
          echo "1. Verifying app can be built and launched"
          
          # Launch the app and capture its output
          xcrun simctl launch "$1" "xyz.chroniclesync.ChronicleSync" || {
            echo "Failed to launch app"
            exit 1
          }
          
          echo "2. App launched successfully"
          
          # Take a screenshot
          xcrun simctl io "$1" screenshot "test_screenshot.png"
          
          # Terminate the app
          xcrun simctl terminate "$1" "xyz.chroniclesync.ChronicleSync"
          
          echo "=== Safari Extension Tests Passed ==="
          exit 0
          EOF
          
          chmod +x test_safari_extension.sh
          
          # Run the test script
          ./test_safari_extension.sh "${{ steps.simulator.outputs.simulator_udid }}" | tee TestResults.log
          
          # Create a results directory
          mkdir -p TestResults
          mv test_screenshot.png TestResults/
          mv TestResults.log TestResults/
      
      - name: Create Unsigned IPA
        run: |
          cd extension/ChronicleSync
          mkdir -p Payload artifacts
          cp -r build/Build/Products/Debug-iphonesimulator/ChronicleSync.app Payload/
          zip -r ChronicleSync-Simulator.ipa Payload
          mv ChronicleSync-Simulator.ipa artifacts/
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ChronicleSync-Artifacts
          path: |
            extension/ChronicleSync/artifacts/ChronicleSync-Simulator.ipa
            extension/ChronicleSync/Payload/ChronicleSync.app
            screenshots/
            extension/ChronicleSync/TestResults
          retention-days: 7
