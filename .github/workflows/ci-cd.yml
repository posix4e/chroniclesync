name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  ci-cd:
    runs-on: macos-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            worker/package-lock.json

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Install System Dependencies
        run: |
          brew install zip
          sudo xcodebuild -license accept || true
          # Ensure proper Xcode setup
          sudo xcode-select --reset
          sudo xcode-select --switch /Applications/Xcode.app
          sudo xcodebuild -runFirstLaunch
          # Debug Xcode setup
          echo "Xcode path: $(xcode-select -p)"
          echo "Available SDKs:"
          xcodebuild -showsdks
          xcrun simctl list
          xcodebuild -version

      - name: Install and Build Pages
        working-directory: pages
        run: |
          npm ci
          npm run lint
          npm run test
          npm run build:web
          npm run build:extensions
          # Debug info for Safari build
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Contents of dist/safari directory:"
          ls -la dist/safari/
          # Run packaging
          npm run package:extensions
          # Verify Safari build results
          echo "Contents of dist/safari-app after build:"
          ls -la dist/safari-app/

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-chrome
          path: pages/chroniclesync-chrome.zip
          if-no-files-found: error

      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-firefox
          path: pages/chroniclesync-firefox.zip
          if-no-files-found: error

      - name: Upload Safari Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-safari
          path: pages/chroniclesync-safari.zip
          if-no-files-found: error

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage



      - name: Delete Old Beta Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete old beta releases
          gh release list | grep "beta-" | cut -f1 | xargs -I {} gh release delete {} -y || true

      - name: Create Beta Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BETA_TAG="beta-$(date +%Y%m%d)"
          BETA_TITLE="Beta Release $(date +%Y-%m-%d)"
          gh release create "$BETA_TAG" pages/chroniclesync-*.zip \
            --title "$BETA_TITLE" \
            --notes "Beta release from main branch

            Changes in this release:
            $(git log -1 --pretty=format:%B)" \
            --prerelease \
            --target main

      - name: Create Production Release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          gh release create "$VERSION" pages/chroniclesync-*.zip \
            --title "Release $VERSION" \
            --notes "Production release $VERSION

            Changes in this release:
            $(git log -1 --pretty=format:%B)" \
            --target main

      - name: Deploy Pages
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main; else npm run deploy -- --branch ${{ github.head_ref }}; fi

      - name: Deploy Worker
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --env production; else npm run deploy -- --env staging; fi
