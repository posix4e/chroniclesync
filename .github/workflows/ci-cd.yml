name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            worker/package-lock.json

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip xvfb wget gnupg
          # Install Chrome for extension testing
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          # Create test-logs directory
          mkdir -p pages/test-logs
          chmod 777 pages/test-logs

          # Install WebdriverIO dependencies globally
          sudo npm install -g @wdio/cli @wdio/local-runner @wdio/mocha-framework @wdio/spec-reporter chromedriver wdio-chromedriver-service

      - name: Install and Build Pages
        working-directory: pages
        run: |
          echo "Installing dependencies..."
          npm ci

          echo "Running linting..."
          npm run lint

          echo "Running unit tests..."
          npm run test

          echo "Building web app..."
          npm run build:web

          echo "Building Chrome extension for E2E tests..."
          BROWSER=chrome npm run build:extensions
          npm run package:chrome

          echo "Running E2E tests..."
          CHROME_BIN=/usr/bin/google-chrome xvfb-run --server-args="-screen 0 1920x1080x24" npm run test:e2e

          echo "Building and packaging extensions..."
          for BROWSER in chrome firefox safari; do
            echo "Building $BROWSER extension..."
            if ! BROWSER=$BROWSER npm run build:extensions; then
              echo "::error::Failed to build $BROWSER extension"
              echo "Build output:"
              ls -la "dist/$BROWSER" || true
              if [ -f "dist/$BROWSER/manifest.json" ]; then
                echo "$BROWSER manifest:"
                cat "dist/$BROWSER/manifest.json"
              fi
              exit 1
            fi

            echo "Packaging $BROWSER extension..."
            if ! npm run "package:$BROWSER"; then
              echo "::error::Failed to package $BROWSER extension"
              ls -la "dist/$BROWSER" || true
              exit 1
            fi
          done

          echo "âœ“ Build completed successfully"
          echo "Generated artifacts:"
          ls -la chroniclesync-*.zip

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-chrome
          path: pages/chroniclesync-chrome.zip
          if-no-files-found: error

      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-firefox
          path: pages/chroniclesync-firefox.zip
          if-no-files-found: error

      - name: Upload Safari Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-safari
          path: pages/chroniclesync-safari.zip
          if-no-files-found: error

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage



      - name: Delete Old Beta Releases and Tags
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete old beta releases and their tags
          for tag in $(gh release list --limit 100 | grep -o 'beta-[0-9]\{8\}-[0-9]\{6\}'); do
            echo "Deleting release and tag: $tag"
            gh release delete "$tag" -y || true
            git tag -d "$tag" 2>/dev/null || true
            git push --delete origin "$tag" 2>/dev/null || true
          done

      - name: Create Beta Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BETA_TAG="beta-$(date +%Y%m%d-%H%M%S)"
          BETA_TITLE="Beta Release $(date '+%Y-%m-%d %H:%M:%S')"
          gh release create "$BETA_TAG" pages/chroniclesync-*.zip \
            --title "$BETA_TITLE" \
            --notes "Beta release from main branch

            Changes in this release:
            $(git log -1 --pretty=format:%B)" \
            --prerelease \
            --target main

      - name: Create Production Release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          gh release create "$VERSION" pages/chroniclesync-*.zip \
            --title "Release $VERSION" \
            --notes "Production release $VERSION

            Changes in this release:
            $(git log -1 --pretty=format:%B)" \
            --target main

      - name: Deploy Pages
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main; else npm run deploy -- --branch ${{ github.head_ref }}; fi

      - name: Deploy Worker
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --env production; else npm run deploy -- --env staging; fi
