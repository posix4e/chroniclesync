name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  ci-cd:
    runs-on: macos-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            worker/package-lock.json

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Install Xcode Command Line Tools
        run: |
          echo "Installing Xcode Command Line Tools..."
          xcode-select --install || true
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept || true
          sudo xcodebuild -runFirstLaunch || true
          
          echo "Xcode setup:"
          xcode-select -p
          xcodebuild -version
          xcrun --version

      - name: Setup Safari Extension Development
        run: |
          echo "Setting up Safari extension development..."
          # Enable Safari Developer Menu
          defaults write com.apple.Safari IncludeDevelopMenu -bool true
          defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
          defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true
          
          # Enable Safari Allow Unsigned Extensions
          defaults write com.apple.Safari AllowUnsignedExtensions -bool true
          
          # Enable Safari Allow Remote Automation
          defaults write com.apple.Safari AllowRemoteAutomation -bool true
          
          # Enable Safari Allow JavaScript from Apple Events
          defaults write com.apple.Safari AllowJavaScriptFromAppleEvents -bool true
          
          echo "Safari development settings:"
          defaults read com.apple.Safari IncludeDevelopMenu
          defaults read com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey
          defaults read com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled
          defaults read com.apple.Safari AllowUnsignedExtensions
          defaults read com.apple.Safari AllowRemoteAutomation
          defaults read com.apple.Safari AllowJavaScriptFromAppleEvents

      - name: Setup Build Environment
        run: |
          echo "Setting up build environment..."
          
          # Check platform requirements
          if [[ "$(uname)" != "Darwin" ]]; then
            echo "::error::Safari extension build requires macOS. This workflow must run on a macOS runner."
            echo "Current OS: $(uname)"
            exit 1
          fi

          # Install dependencies
          echo "Installing dependencies..."
          brew install zip jq

          # Verify Xcode installation
          if ! command -v xcodebuild &> /dev/null; then
            echo "::error::Xcode not found. Please ensure Xcode 15.0 or later is installed."
            exit 1
          fi

          # Print Xcode version
          XCODE_VERSION=$(xcodebuild -version | head -n1)
          if [[ ! "$XCODE_VERSION" =~ ^Xcode[[:space:]]15 ]]; then
            echo "::warning::Recommended Xcode version is 15.0 or later. Found: $XCODE_VERSION"
          fi
          
          # Setup Xcode
          echo "Configuring Xcode..."
          sudo xcodebuild -license accept || true
          sudo xcode-select --reset
          sudo xcode-select --switch /Applications/Xcode.app
          sudo xcodebuild -runFirstLaunch

          # Verify Safari extension converter
          CONVERTER_PATH=$(xcrun --find safari-web-extension-converter 2>/dev/null || true)
          if [ -z "$CONVERTER_PATH" ]; then
            echo "::error::Safari Web Extension Converter not found."
            echo "This tool is required and should be included with Xcode."
            echo "Please ensure Xcode is properly installed with command line tools."
            exit 1
          fi

          # Verify ditto command
          if ! command -v ditto &> /dev/null; then
            echo "::warning::ditto command not found. Will use zip as fallback."
          fi

          # Verify build tools
          echo "Build tools:"
          echo "- xcodebuild: $(which xcodebuild)"
          echo "- xcrun: $(which xcrun)"
          echo "- ditto: $(which ditto || echo 'not found')"
          echo "- zip: $(which zip)"
          echo "- jq: $(which jq)"
          
          echo "✓ Build environment ready"
          echo "Xcode: $XCODE_VERSION"
          echo "Safari Extension Converter: $CONVERTER_PATH"

      - name: Install and Build Pages
        working-directory: pages
        run: |
          echo "Installing dependencies..."
          npm ci

          echo "Running linting..."
          npm run lint

          echo "Running tests..."
          npm run test

          echo "Building web app..."
          npm run build:web

          echo "Building Chrome extension..."
          if ! BROWSER=chrome npm run build:extensions; then
            echo "::error::Failed to build Chrome extension"
            echo "Build output:"
            ls -la dist/chrome || true
            if [ -f "dist/chrome/manifest.json" ]; then
              echo "Chrome manifest:"
              cat "dist/chrome/manifest.json"
            fi
            exit 1
          fi

          echo "Building Firefox extension..."
          if ! BROWSER=firefox npm run build:extensions; then
            echo "::error::Failed to build Firefox extension"
            echo "Build output:"
            ls -la dist/firefox || true
            if [ -f "dist/firefox/manifest.json" ]; then
              echo "Firefox manifest:"
              cat "dist/firefox/manifest.json"
            fi
            exit 1
          fi

          echo "Building Safari extension..."
          if ! BROWSER=safari npm run build:extensions; then
            echo "::error::Failed to build Safari extension"
            echo "Build output:"
            ls -la dist/safari || true
            if [ -f "dist/safari/manifest.json" ]; then
              echo "Safari manifest:"
              cat "dist/safari/manifest.json"
            fi
            exit 1
          fi

          echo "Packaging Chrome extension..."
          if ! npm run package:chrome; then
            echo "::error::Failed to package Chrome extension"
            ls -la dist/chrome || true
            exit 1
          fi

          echo "Packaging Firefox extension..."
          if ! npm run package:firefox; then
            echo "::error::Failed to package Firefox extension"
            ls -la dist/firefox || true
            exit 1
          fi

          echo "Packaging Safari extension..."
          if ! npm run package:safari; then
            echo "::error::Failed to package Safari extension"
            ls -la dist/safari || true
            exit 1
          fi

          echo "✓ Build completed successfully"
          echo "Generated artifacts:"
          ls -la chroniclesync-*.zip

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-chrome
          path: pages/chroniclesync-chrome.zip
          if-no-files-found: error

      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-firefox
          path: pages/chroniclesync-firefox.zip
          if-no-files-found: error

      - name: Upload Safari Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-safari
          path: pages/chroniclesync-safari.zip
          if-no-files-found: error

      - name: Test Worker
        working-directory: worker
        run: npm ci && npm run lint && npm run test:coverage



      - name: Delete Old Beta Releases and Tags
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete old beta releases and their tags
          for tag in $(gh release list | grep "beta-" | cut -f1); do
            echo "Deleting release and tag: $tag"
            gh release delete "$tag" -y || true
            git tag -d "$tag" 2>/dev/null || true
            git push --delete origin "$tag" 2>/dev/null || true
          done

      - name: Create Beta Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BETA_TAG="beta-$(date +%Y%m%d)"
          BETA_TITLE="Beta Release $(date +%Y-%m-%d)"
          gh release create "$BETA_TAG" pages/chroniclesync-*.zip \
            --title "$BETA_TITLE" \
            --notes "Beta release from main branch

            Changes in this release:
            $(git log -1 --pretty=format:%B)" \
            --prerelease \
            --target main

      - name: Create Production Release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          gh release create "$VERSION" pages/chroniclesync-*.zip \
            --title "Release $VERSION" \
            --notes "Production release $VERSION

            Changes in this release:
            $(git log -1 --pretty=format:%B)" \
            --target main

      - name: Deploy Pages
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main; else npm run deploy -- --branch ${{ github.head_ref }}; fi

      - name: Deploy Worker
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --env production; else npm run deploy -- --env staging; fi
