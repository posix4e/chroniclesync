name: CI/CD Matrix Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test (leave empty to test all browsers)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - chromium
          - firefox
          - safari
      api_endpoint:
        description: 'API endpoint to test against'
        required: false
        type: string
        default: 'https://api-staging.chroniclesync.xyz'
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            extension/package-lock.json
            
      - name: Install dependencies
        run: |
          cd extension
          npm ci
          
      - name: Lint
        run: |
          cd extension
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            extension/package-lock.json
            
      - name: Install dependencies
        run: |
          cd extension
          npm ci
          
      - name: Test
        run: |
          cd extension
          npm run test

  build-extension:
    needs: [lint, test]
    if: success()
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, safari]
        include:
          - browser: chrome
            os: ubuntu-latest
          - browser: firefox
            os: ubuntu-latest
          - browser: safari
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Skip this job if a specific browser is requested in workflow_dispatch and it's not this one
      - name: Check if this browser should be tested
        id: should_test
        run: |
          SHOULD_TEST="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.browser }}" != "" ]]; then
            if [[ "${{ matrix.browser }}" == "chrome" && "${{ github.event.inputs.browser }}" != "chromium" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "firefox" && "${{ github.event.inputs.browser }}" != "firefox" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "safari" && "${{ github.event.inputs.browser }}" != "safari" ]]; then
              SHOULD_TEST="false"
            fi
          fi
          echo "should_test=${SHOULD_TEST}" >> $GITHUB_OUTPUT
          
      - uses: actions/checkout@v4
        if: steps.should_test.outputs.should_test == 'true'

      - uses: actions/setup-node@v4
        if: steps.should_test.outputs.should_test == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: extension/package-lock.json

      # Setup Xcode for Safari builds
      - name: Setup Xcode (Safari only)
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      # Setup Apple certificates for Safari builds
      - name: Setup Apple certificates (Safari only)
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari'
        env:
          APPLE_CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD="temporary"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          echo -n "$APPLE_CERTIFICATE_CONTENT" | base64 --decode > $CERTIFICATE_PATH
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROVISIONING_PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          echo -n "$APPLE_PROVISIONING_PROFILE" | base64 --decode > "$PROVISIONING_PROFILE_PATH"
          
          # Update export options plists with team ID
          cd extension/safari
          sed -i '' "s/TEAM_ID/$APPLE_TEAM_ID/g" exportOptions-macOS.plist
          sed -i '' "s/TEAM_ID/$APPLE_TEAM_ID/g" exportOptions-iOS.plist
      
      # Setup App Store Connect API for Safari builds
      - name: Setup App Store Connect API (Safari only)
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari'
        env:
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Create App Store Connect API key file
          mkdir -p ~/.appstoreconnect/private_keys
          echo -n "$APPLE_API_KEY_CONTENT" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
          
          # Create API key configuration
          cat > ~/.appstoreconnect/auth.json << EOF
          {
            "key_id": "$APPLE_API_KEY_ID",
            "issuer_id": "$APPLE_API_KEY_ISSUER_ID",
            "key_file": "~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8"
          }
          EOF

      # Install dependencies and build extension
      - name: Install dependencies and build extension
        if: steps.should_test.outputs.should_test == 'true'
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          APPLE_CERTIFICATE_CONTENT: ${{ secrets.APPLE_CERTIFICATE_CONTENT }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          cd extension
          npm ci
          
          if [[ "${{ matrix.browser }}" != "safari" ]]; then
            # Build for Chrome/Firefox
            npm run build:${{ matrix.browser }}
            
            # Create artifact directory
            mkdir -p dist
            
            # Copy built files to dist
            if [[ "${{ matrix.browser }}" == "chrome" ]]; then
              cp -r build/chrome/* dist/
            else
              cp -r build/firefox/* dist/
            fi
          else
            # Safari-specific steps
            cd safari
            
            # Install SwiftLint
            brew install swiftlint
            
            # Install Safari Extension Dependencies
            npm install
            
            # Lint Safari Extension Swift Code
            npm run lint:strict
            
            # Build Safari Extension for macOS
            mkdir -p build
            
            # Build and archive
            xcodebuild -project ChronicleSync.xcodeproj \
              -scheme "ChronicleSync (macOS)" \
              -configuration Release \
              -archivePath ./build/ChronicleSync-macOS.xcarchive \
              DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
              PRODUCT_BUNDLE_IDENTIFIER=$APPLE_APP_ID \
              archive
            
            # Export archive
            xcodebuild -exportArchive \
              -archivePath ./build/ChronicleSync-macOS.xcarchive \
              -exportOptionsPlist exportOptions-macOS.plist \
              -exportPath ./build
              
            # Build Safari Extension for iOS
            xcodebuild -project ChronicleSync.xcodeproj \
              -scheme "ChronicleSync (iOS)" \
              -configuration Release \
              -destination "generic/platform=iOS" \
              -archivePath ./build/ChronicleSync-iOS.xcarchive \
              DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
              PRODUCT_BUNDLE_IDENTIFIER=$APPLE_APP_ID \
              archive
            
            # Export iOS archive
            xcodebuild -exportArchive \
              -archivePath ./build/ChronicleSync-iOS.xcarchive \
              -exportOptionsPlist exportOptions-iOS.plist \
              -exportPath ./build
          fi

      # Upload Chrome/Firefox artifacts
      - name: Upload Chrome/Firefox Extension Artifacts
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser != 'safari'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.browser }}-extension
          path: extension/dist
          retention-days: 7
          
      # Upload Safari artifacts
      - name: Upload Safari Extension Artifacts
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari'
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension
          path: |
            extension/safari/build/*.app
            extension/safari/build/*.ipa
          retention-days: 7

  test-extension:
    needs: [build-extension]
    if: success()
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, safari]
        include:
          - browser: chrome
            os: ubuntu-latest
          - browser: firefox
            os: ubuntu-latest
          - browser: safari
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Skip this job if a specific browser is requested in workflow_dispatch and it's not this one
      - name: Check if this browser should be tested
        id: should_test
        run: |
          SHOULD_TEST="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.browser }}" != "" ]]; then
            if [[ "${{ matrix.browser }}" == "chrome" && "${{ github.event.inputs.browser }}" != "chromium" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "firefox" && "${{ github.event.inputs.browser }}" != "firefox" ]]; then
              SHOULD_TEST="false"
            fi
            if [[ "${{ matrix.browser }}" == "safari" && "${{ github.event.inputs.browser }}" != "safari" ]]; then
              SHOULD_TEST="false"
            fi
          fi
          echo "should_test=${SHOULD_TEST}" >> $GITHUB_OUTPUT
          
      - uses: actions/checkout@v4
        if: steps.should_test.outputs.should_test == 'true'

      - uses: actions/setup-node@v4
        if: steps.should_test.outputs.should_test == 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: extension/package-lock.json

      # Download extension artifacts
      - name: Download extension artifacts
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser != 'safari'
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.browser }}-extension
          path: extension/dist
          
      # Download Safari extension artifacts
      - name: Download Safari extension artifacts
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari'
        uses: actions/download-artifact@v4
        with:
          name: safari-extension
          path: extension/safari/build

      # Setup Xcode for Safari tests
      - name: Setup Xcode (Safari only)
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # Run tests
      - name: Run tests
        if: steps.should_test.outputs.should_test == 'true'
        env:
          API_URL: ${{ github.event.inputs.api_endpoint || (github.ref == 'refs/heads/main' && 'https://api.chroniclesync.xyz' || 'https://api-staging.chroniclesync.xyz') }}
          DEBUG: ${{ github.event.inputs.debug && 'pw:api' || '' }}
          PWDEBUG: ${{ github.event.inputs.debug && '1' || '' }}
          PORT: 3000
          BROWSER: ${{ matrix.browser == 'chrome' && 'chromium' || (matrix.browser == 'firefox' && 'firefox' || 'safari') }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          cd extension
          npm ci
          
          if [[ "${{ matrix.browser }}" != "safari" ]]; then
            # Install Playwright browsers
            npx playwright install --with-deps
            npx playwright install --with-deps ${{ matrix.browser == 'chrome' && 'chromium' || 'firefox' }}
            
            # Run browser-specific e2e tests
            npm run test:e2e:${{ matrix.browser }}
          else
            # Run Safari Extension Tests
            cd safari
            xcodebuild test -project ChronicleSync.xcodeproj -scheme "ChronicleSync macOS Tests" -destination "platform=macOS"
            xcodebuild test -project ChronicleSync.xcodeproj -scheme "ChronicleSync iOS Tests" -destination "platform=iOS Simulator,name=iPhone 14"
          fi

      # Upload test results for Chrome/Firefox
      - name: Upload test results (Chrome/Firefox)
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser != 'safari' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-extension-${{ matrix.browser }}
          path: |
            extension/playwright-report/
            extension/test-results/${{ matrix.browser == 'chrome' && 'chrome' || 'firefox' }}/
          retention-days: 30
          
      # Upload test results for Safari
      - name: Upload test results (Safari)
        if: steps.should_test.outputs.should_test == 'true' && matrix.browser == 'safari' && always()
        uses: actions/upload-artifact@v4
        with:
          name: safari-test-results
          path: |
            extension/safari/build/test-results/
          retention-days: 30

  deploy:
    needs: [test-extension]
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            extension/package-lock.json
            
      # Download all extension artifacts
      - name: Download Chrome extension
        uses: actions/download-artifact@v4
        with:
          name: chrome-extension
          path: extension/dist/chrome
          
      - name: Download Firefox extension
        uses: actions/download-artifact@v4
        with:
          name: firefox-extension
          path: extension/dist/firefox
          
      - name: Download Safari extension
        uses: actions/download-artifact@v4
        with:
          name: safari-extension
          path: extension/dist/safari
      
      # Deploy extensions
      - name: Deploy extensions
        run: |
          cd extension
          # Add deployment steps here
          echo "Deploying extensions to stores"