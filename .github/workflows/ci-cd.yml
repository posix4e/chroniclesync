name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            pages/package-lock.json
            worker/package-lock.json

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Install and Build Pages
        working-directory: pages
        run: |
          # Create a directory for debug logs
          mkdir -p debug_logs
          
          {
            echo "Installing dependencies..."
            npm ci
            
            echo "Running linting..."
            npm run lint
            
            echo "Running tests..."
            npm run test
            
            echo "Building web app..."
            npm run build:web
            
            echo "Building and packaging extensions..."
            for BROWSER in chrome firefox safari; do
              echo "Building $BROWSER extension..."
              if ! BROWSER=$BROWSER npm run build:extensions; then
                echo "::error::Failed to build $BROWSER extension"
                echo "Build output:"
                ls -la "dist/$BROWSER" || true
                if [ -f "dist/$BROWSER/manifest.json" ]; then
                  echo "$BROWSER manifest:"
                  cat "dist/$BROWSER/manifest.json"
                fi
                exit 1
              fi
              
              echo "Packaging $BROWSER extension..."
              if ! npm run "package:$BROWSER"; then
                echo "::error::Failed to package $BROWSER extension"
                ls -la "dist/$BROWSER" || true
                exit 1
              fi
              
              # Capture extension-specific debug info
              echo "Capturing debug info for $BROWSER extension..."
              {
                echo "=== $BROWSER Extension Build Info ==="
                echo "Directory structure:"
                ls -R "dist/$BROWSER"
                echo -e "\nManifest content:"
                cat "dist/$BROWSER/manifest.json"
              } > "debug_logs/${BROWSER}_build_info.log"
            done
            
            echo "âœ“ Build completed successfully"
            echo "Generated artifacts:"
            ls -la chroniclesync-*.zip
            
            # Capture final build state
            echo -e "\nFinal build directory structure:" >> debug_logs/build_summary.log
            ls -R . >> debug_logs/build_summary.log
          } 2>&1 | tee debug_logs/build_output.log

      - name: Upload Debug Logs
        uses: actions/upload-artifact@v3
        with:
          name: build-debug-logs
          path: pages/debug_logs/
          if-no-files-found: error

      - name: Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-chrome
          path: pages/chroniclesync-chrome.zip
          if-no-files-found: error

      - name: Upload Firefox Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-firefox
          path: pages/chroniclesync-firefox.zip
          if-no-files-found: error

      - name: Upload Safari Extension Artifact
        uses: actions/upload-artifact@v3
        with:
          name: chroniclesync-safari
          path: pages/chroniclesync-safari.zip
          if-no-files-found: error

      - name: Test Worker
        working-directory: worker
        run: |
          mkdir -p debug_logs
          {
            echo "Installing dependencies..."
            npm ci
            
            echo "Running linting..."
            npm run lint
            
            echo "Running tests with coverage..."
            npm run test:coverage
            
            echo "Capturing test coverage report..."
            cp -r coverage debug_logs/
          } 2>&1 | tee debug_logs/worker_output.log

      - name: Upload Worker Debug Logs
        uses: actions/upload-artifact@v3
        with:
          name: worker-debug-logs
          path: worker/debug_logs/
          if-no-files-found: error



      - name: Delete Old Beta Releases and Tags
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete old beta releases and their tags
          for tag in $(gh release list --limit 100 | grep -o 'beta-[0-9]\{8\}-[0-9]\{6\}'); do
            echo "Deleting release and tag: $tag"
            gh release delete "$tag" -y || true
            git tag -d "$tag" 2>/dev/null || true
            git push --delete origin "$tag" 2>/dev/null || true
          done

      - name: Create Beta Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BETA_TAG="beta-$(date +%Y%m%d-%H%M%S)"
          BETA_TITLE="Beta Release $(date '+%Y-%m-%d %H:%M:%S')"
          gh release create "$BETA_TAG" pages/chroniclesync-*.zip \
            --title "$BETA_TITLE" \
            --notes "Beta release from main branch

            Changes in this release:
            $(git log -1 --pretty=format:%B)" \
            --prerelease \
            --target main

      - name: Create Production Release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          gh release create "$VERSION" pages/chroniclesync-*.zip \
            --title "Release $VERSION" \
            --notes "Production release $VERSION

            Changes in this release:
            $(git log -1 --pretty=format:%B)" \
            --target main

      - name: Deploy Pages
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --branch main; else npm run deploy -- --branch ${{ github.head_ref }}; fi

      - name: Deploy Worker
        if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: if [ "${{ github.ref }}" = "refs/heads/main" ]; then npm run deploy -- --env production; else npm run deploy -- --env staging; fi
