name: Build and Test Safari Extension

on:
  push:
    branches: [ main, ios-* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering
    inputs:
      run_uitests:
        description: 'Run UI tests'
        required: false
        type: boolean
        default: true

jobs:
  build:
    name: Build Unsigned IPA with Screenshots
    runs-on: macos-latest  # Use the latest macOS runner
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: List Available Simulators
        run: xcrun simctl list devices available
      
      - name: Install Dependencies
        run: |
          cd extension/ChronicleSync
          # Add any dependency installation steps here if needed
          # For example: pod install, etc.
      
      - name: Build for Simulator
        run: |
          cd extension/ChronicleSync
          
          # Find available iPhone simulator
          echo "Finding available iPhone simulator..."
          AVAILABLE_SIMULATOR=$(xcrun simctl list devices available | grep "iPhone" | grep -v "unavailable" | head -1)
          SIMULATOR_NAME=$(echo "$AVAILABLE_SIMULATOR" | sed -E 's/.*iPhone[^(]*\(.*\).*/iPhone/' | xargs)
          SIMULATOR_OS=$(echo "$AVAILABLE_SIMULATOR" | sed -E 's/.*iOS ([0-9.]+).*/\1/' | xargs)
          
          echo "Using simulator: $SIMULATOR_NAME with iOS $SIMULATOR_OS"
          
          # Build for iPhone simulator
          xcodebuild \
            -scheme "ChronicleSync (iOS)" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,id=`echo "$AVAILABLE_SIMULATOR" | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/'`" \
            -configuration Debug \
            -derivedDataPath build \
            clean build
      
      - name: Boot Simulator and Install App
        run: |
          # List available simulators and find a suitable iPhone simulator
          echo "Listing available simulators:"
          xcrun simctl list devices available
          
          # Try to find iPhone 15 with any OS version
          SIMULATOR_UDID=$(xcrun simctl list devices available | grep "iPhone 15" | grep -v "Pro" | grep -v "Plus" | grep -v "unavailable" | head -1 | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
          
          # If not found, try any iPhone
          if [ -z "$SIMULATOR_UDID" ]; then
            echo "iPhone 15 not found, trying any iPhone..."
            SIMULATOR_UDID=$(xcrun simctl list devices available | grep "iPhone" | grep -v "unavailable" | head -1 | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
          fi
          
          echo "Using simulator with UDID: $SIMULATOR_UDID"
          
          # Check if we found a valid simulator
          if [ -z "$SIMULATOR_UDID" ]; then
            echo "Error: Could not find any iPhone simulator. Exiting."
            exit 1
          fi
          
          # Boot the simulator
          echo "Booting simulator..."
          xcrun simctl boot "$SIMULATOR_UDID"
          
          # Wait for simulator to boot
          echo "Waiting for simulator to boot..."
          sleep 20
          
          # Find the app bundle
          echo "Finding app bundle..."
          APP_PATH=$(find extension/ChronicleSync/build -name "*.app" -type d | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "Error: Could not find app bundle. Listing build directory contents:"
            find extension/ChronicleSync/build -type d -name "*.app" || echo "No .app bundles found"
            find extension/ChronicleSync/build -type f -name "Info.plist" || echo "No Info.plist files found"
            ls -la extension/ChronicleSync/build/Build/Products/Debug-iphonesimulator/ || echo "Debug-iphonesimulator directory not found"
            exit 1
          fi
          
          echo "Found app bundle at: $APP_PATH"
          
          # Verify Info.plist exists
          if [ ! -f "$APP_PATH/Info.plist" ]; then
            echo "Error: Info.plist not found in app bundle. Listing app bundle contents:"
            ls -la "$APP_PATH"
            exit 1
          else
            echo "Info.plist found. Examining contents:"
            echo "File size: $(wc -c < "$APP_PATH/Info.plist") bytes"
            echo "First 20 lines of Info.plist:"
            head -n 20 "$APP_PATH/Info.plist"
            echo "..."
          fi
          
          # Get bundle identifier using multiple methods
          echo "Attempting to read bundle identifier..."
          
          # Method 1: Use plutil (preferred method)
          BUNDLE_ID=$(plutil -p "$APP_PATH/Info.plist" 2>/dev/null | grep CFBundleIdentifier | awk -F'"' '{print $4}' || echo "")
          
          # Method 2: Use grep directly on the plist file
          if [ -z "$BUNDLE_ID" ]; then
            echo "Trying alternative method to read bundle identifier..."
            BUNDLE_ID=$(grep -A1 CFBundleIdentifier "$APP_PATH/Info.plist" 2>/dev/null | grep string | sed -E 's/.*<string>(.*)<\/string>.*/\1/' || echo "")
          fi
          
          # Method 3: Use defaults with correct path
          if [ -z "$BUNDLE_ID" ]; then
            echo "Trying defaults command to read bundle identifier..."
            BUNDLE_ID=$(defaults read "$APP_PATH/Info.plist" CFBundleIdentifier 2>/dev/null || echo "")
          fi
          
          # Fallback to default if all methods fail
          if [ -z "$BUNDLE_ID" ]; then
            echo "Warning: Could not determine bundle identifier. Using default..."
            BUNDLE_ID="xyz.chroniclesync.ChronicleSync"
          fi
          
          echo "Bundle identifier: $BUNDLE_ID"
          
          # Install the app
          echo "Installing app..."
          xcrun simctl install "$SIMULATOR_UDID" "$APP_PATH"
          
          # Verify installation
          echo "Verifying app installation..."
          xcrun simctl listapps "$SIMULATOR_UDID" | grep -q "$BUNDLE_ID" || echo "Warning: App may not have been installed correctly"
          
          # Create screenshots directory
          mkdir -p screenshots
          
          # Launch the app (if bundle ID was successfully determined)
          if [ ! -z "$BUNDLE_ID" ]; then
            echo "Launching app with bundle identifier: $BUNDLE_ID"
            xcrun simctl launch "$SIMULATOR_UDID" "$BUNDLE_ID" || echo "Warning: Could not launch app"
            
            # Wait for app to launch
            sleep 5
            
            # Take screenshot of app
            echo "Taking screenshot of app..."
            xcrun simctl io "$SIMULATOR_UDID" screenshot "screenshots/app_screen.png" || echo "Warning: Could not take app screenshot"
          else
            echo "Skipping app launch as bundle identifier could not be determined"
          fi
          
          # Take screenshot of home screen
          echo "Taking screenshot of home screen..."
          xcrun simctl io "$SIMULATOR_UDID" screenshot "screenshots/home_screen.png" || echo "Warning: Could not take home screen screenshot"
          
          # Navigate to Safari
          echo "Launching Safari..."
          xcrun simctl launch "$SIMULATOR_UDID" "com.apple.mobilesafari" || echo "Warning: Could not launch Safari"
          sleep 3
          
          # Take screenshot of Safari
          echo "Taking screenshot of Safari..."
          xcrun simctl io "$SIMULATOR_UDID" screenshot "screenshots/safari.png" || echo "Warning: Could not take Safari screenshot"
          
          # Open Settings app
          echo "Launching Settings app..."
          xcrun simctl launch "$SIMULATOR_UDID" "com.apple.Preferences" || echo "Warning: Could not launch Settings"
          sleep 3
          
          # Take screenshot of Settings
          echo "Taking screenshot of Settings..."
          xcrun simctl io "$SIMULATOR_UDID" screenshot "screenshots/settings.png" || echo "Warning: Could not take Settings screenshot"
          
          # Create a README for the screenshots
          cat > screenshots/README.md << EOF
          # ChronicleSync Simulator Screenshots
          
          These screenshots were automatically generated during the build process.
          
          ## Home Screen
          ![Home Screen](home_screen.png)
          
          ## Safari
          ![Safari](safari.png)
          
          ## Settings
          ![Settings](settings.png)
          
          *Note: These are basic screenshots. The extension may need to be manually enabled in Settings > Safari > Extensions.*
          EOF
      
      - name: Create Unsigned IPA
        run: |
          cd extension/ChronicleSync
          # Create a directory for the app
          mkdir -p Payload
          
          # Find and copy the app bundle
          cp -r build/Build/Products/Debug-iphonesimulator/ChronicleSync.app Payload/
          
          # Create the IPA (which is just a zip file with a specific structure)
          zip -r ChronicleSync-Simulator.ipa Payload
          
          # Move to a known location
          mkdir -p artifacts
          mv ChronicleSync-Simulator.ipa artifacts/
      
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ChronicleSync-Simulator
          path: extension/ChronicleSync/artifacts/ChronicleSync-Simulator.ipa
          retention-days: 7
      
      - name: Upload App Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ChronicleSync-App-Bundle
          path: extension/ChronicleSync/Payload/ChronicleSync.app
          retention-days: 7
          
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        with:
          name: ChronicleSync-Screenshots
          path: screenshots/
          retention-days: 7

  uitests:
    name: Safari Extension UI Tests
    runs-on: macos-latest
    needs: build
    if: success() && (github.event_name != 'workflow_dispatch' || github.event.inputs.run_uitests == 'true')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Install dependencies
        run: |
          cd extension
          npm ci
      
      - name: Run add-uitests-target script
        run: |
          cd extension/ChronicleSync
          chmod +x add-uitests-target.sh
          ./add-uitests-target.sh
      
      - name: Start Backend Server
        run: |
          cd extension
          npm run start-test-server &
          sleep 10 # Wait for server to start
      
      - name: Run UI Tests
        run: |
          cd extension/ChronicleSync
          
          # Find available iPhone simulator
          echo "Finding available iPhone simulator..."
          AVAILABLE_SIMULATOR=$(xcrun simctl list devices available | grep "iPhone" | grep -v "unavailable" | head -1)
          SIMULATOR_NAME=$(echo "$AVAILABLE_SIMULATOR" | sed -E 's/.*iPhone[^(]*\(.*\).*/iPhone/' | xargs)
          SIMULATOR_UDID=$(echo "$AVAILABLE_SIMULATOR" | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
          
          echo "Using simulator: $SIMULATOR_NAME with UDID: $SIMULATOR_UDID"
          
          # Run the UI tests
          xcodebuild test \
            -project ChronicleSync.xcodeproj \
            -scheme "ChronicleSync-UITests" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" \
            -resultBundlePath TestResults
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safari-uitest-results
          path: extension/ChronicleSync/TestResults
          retention-days: 7
