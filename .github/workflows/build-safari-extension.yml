name: Build Safari iOS Extension

on:
  push:
    branches: [ main ]
    paths:
      - 'extension/**'
      - 'safari-ios/**'
      - '.github/workflows/build-safari-extension.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'extension/**'
      - 'safari-ios/**'
      - '.github/workflows/build-safari-extension.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: extension/package-lock.json
    
    - name: Install Chrome extension dependencies
      run: |
        cd extension
        npm ci
    
    - name: Build Safari extension
      run: |
        chmod +x ./safari-ios/build-safari-extension.sh
        ./safari-ios/build-safari-extension.sh
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Set up code signing
      if: github.event_name != 'pull_request'
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Skip if secrets are not available
        if [ -z "$BUILD_CERTIFICATE_BASE64" ] || [ -z "$P12_PASSWORD" ] || [ -z "$BUILD_PROVISION_PROFILE_BASE64" ]; then
          echo "Skipping code signing setup - secrets not available"
          exit 0
        fi
        
        # Create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Apply provisioning profile
        PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PROFILE_PATH
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
    
    - name: Build Xcode project
      run: |
        cd safari-ios/ChronicleSync
        xcodebuild clean build -project ChronicleSync.xcodeproj -scheme "ChronicleSync" -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
    
    - name: Archive Safari extension
      if: github.event_name != 'pull_request'
      run: |
        cd safari-ios
        mkdir -p artifacts
        zip -r artifacts/ChronicleSync-Safari-Extension.zip ChronicleSync
    
    - name: Upload artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: safari-extension
        path: safari-ios/artifacts/ChronicleSync-Safari-Extension.zip